{"ast":null,"code":"var _jsxFileName = \"C:\\\\Learning\\\\coronavirus-tracker\\\\components\\\\StateStats.js\";\nvar __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport useFetch from \"../utils/useFetch\";\nimport { Card, Dropdown } from \"semantic-ui-react\";\n\nconst StateStats = ({\n  country\n}) => {\n  if (country === \"world\") {\n    return __jsx(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 7\n      },\n      __self: this\n    }, \"Select country to see state wise data\");\n  }\n\n  const {\n    0: selectedState,\n    1: setSelectedState\n  } = useState({\n    provinceState: undefined\n  });\n  const {\n    stats: states,\n    loading,\n    error\n  } = useFetch(`https://covid19.mathdro.id/api/countries/${country}/confirmed`);\n  if (loading) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, \"Loading States of selected country...\");\n  if (error) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, \"Retrieving states API Error => \", error.toString());\n  if (states.error) return __jsx(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, \"No data found. Retrieving states API error => \", stats.error.message);\n  let cardItems = [];\n  console.log(\"State wise info\", states);\n  let stateOptions = states.map(({\n    provinceState,\n    countryRegion\n  }) => ({\n    key: provinceState || countryRegion,\n    value: provinceState || countryRegion,\n    text: provinceState || countryRegion\n  }));\n\n  const onChange = selectedValue => {\n    const selectedState = states.find(state => state.provinceState === selectedValue);\n    console.log(\"Selected state info\", selectedState);\n    setSelectedState(selectedState);\n  };\n\n  if (selectedState.provinceState) {\n    cardItems = [{\n      header: \"Confirmed\",\n      description: `${selectedState.confirmed}`,\n      color: \"grey\",\n      meta: \"\"\n    }, {\n      header: \"Active:\",\n      color: \"blue\",\n      description: `${selectedState.deaths}`,\n      meta: \"\"\n    }, {\n      header: \"Recovered\",\n      color: \"green\",\n      description: `${selectedState.recovered}`,\n      meta: \"\"\n    }, {\n      header: \"Deaths\",\n      color: \"red\",\n      description: `${selectedState.deaths}`,\n      meta: \"\"\n    }];\n  }\n\n  return __jsx(React.Fragment, null, __jsx(Dropdown, {\n    placeholder: \"Select State\",\n    fluid: true,\n    search: true,\n    selection: true,\n    options: stateOptions,\n    defaultValue: \"world\",\n    onChange: (e, data) => {\n      onChange(data.value);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }), __jsx(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }), __jsx(Card.Group, {\n    itemsPerRow: 4,\n    items: cardItems,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }));\n};\n\nexport default StateStats;","map":{"version":3,"sources":["C:/Learning/coronavirus-tracker/components/StateStats.js"],"names":["React","useState","useFetch","Card","Dropdown","StateStats","country","selectedState","setSelectedState","provinceState","undefined","stats","states","loading","error","toString","message","cardItems","console","log","stateOptions","map","countryRegion","key","value","text","onChange","selectedValue","find","state","header","description","confirmed","color","meta","deaths","recovered","e","data"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,QAAP,MAAqB,mBAArB;AACA,SAASC,IAAT,EAAeC,QAAf,QAA+B,mBAA/B;;AAEA,MAAMC,UAAU,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAiB;AAClC,MAAIA,OAAO,KAAK,OAAhB,EAAyB;AACvB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAAP;AACD;;AAED,QAAM;AAAA,OAACC,aAAD;AAAA,OAAgBC;AAAhB,MAAoCP,QAAQ,CAAC;AACjDQ,IAAAA,aAAa,EAAEC;AADkC,GAAD,CAAlD;AAIA,QAAM;AAAEC,IAAAA,KAAK,EAAEC,MAAT;AAAiBC,IAAAA,OAAjB;AAA0BC,IAAAA;AAA1B,MAAoCZ,QAAQ,CAC/C,4CAA2CI,OAAQ,YADJ,CAAlD;AAIA,MAAIO,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAAP;AAEb,MAAIC,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wCAAmCA,KAAK,CAACC,QAAN,EAAnC,CAAP;AAEX,MAAIH,MAAM,CAACE,KAAX,EACE,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uDACiDH,KAAK,CAACG,KAAN,CAAYE,OAD7D,CADF;AAMF,MAAIC,SAAS,GAAG,EAAhB;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BP,MAA/B;AAEA,MAAIQ,YAAY,GAAGR,MAAM,CAACS,GAAP,CAAW,CAAC;AAAEZ,IAAAA,aAAF;AAAiBa,IAAAA;AAAjB,GAAD,MAAuC;AACnEC,IAAAA,GAAG,EAAEd,aAAa,IAAIa,aAD6C;AAEnEE,IAAAA,KAAK,EAAEf,aAAa,IAAIa,aAF2C;AAGnEG,IAAAA,IAAI,EAAEhB,aAAa,IAAIa;AAH4C,GAAvC,CAAX,CAAnB;;AAMA,QAAMI,QAAQ,GAAGC,aAAa,IAAI;AAChC,UAAMpB,aAAa,GAAGK,MAAM,CAACgB,IAAP,CACpBC,KAAK,IAAIA,KAAK,CAACpB,aAAN,KAAwBkB,aADb,CAAtB;AAGAT,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCZ,aAAnC;AACAC,IAAAA,gBAAgB,CAACD,aAAD,CAAhB;AACD,GAND;;AAQA,MAAIA,aAAa,CAACE,aAAlB,EAAiC;AAC/BQ,IAAAA,SAAS,GAAG,CACV;AACEa,MAAAA,MAAM,EAAE,WADV;AAEEC,MAAAA,WAAW,EAAG,GAAExB,aAAa,CAACyB,SAAU,EAF1C;AAGEC,MAAAA,KAAK,EAAE,MAHT;AAIEC,MAAAA,IAAI,EAAE;AAJR,KADU,EAOV;AACEJ,MAAAA,MAAM,EAAE,SADV;AAEEG,MAAAA,KAAK,EAAE,MAFT;AAGEF,MAAAA,WAAW,EAAG,GAAExB,aAAa,CAAC4B,MAAO,EAHvC;AAIED,MAAAA,IAAI,EAAE;AAJR,KAPU,EAaV;AACEJ,MAAAA,MAAM,EAAE,WADV;AAEEG,MAAAA,KAAK,EAAE,OAFT;AAGEF,MAAAA,WAAW,EAAG,GAAExB,aAAa,CAAC6B,SAAU,EAH1C;AAIEF,MAAAA,IAAI,EAAE;AAJR,KAbU,EAmBV;AACEJ,MAAAA,MAAM,EAAE,QADV;AAEEG,MAAAA,KAAK,EAAE,KAFT;AAGEF,MAAAA,WAAW,EAAG,GAAExB,aAAa,CAAC4B,MAAO,EAHvC;AAIED,MAAAA,IAAI,EAAE;AAJR,KAnBU,CAAZ;AA0BD;;AAED,SACE,4BACE,MAAC,QAAD;AACE,IAAA,WAAW,EAAC,cADd;AAEE,IAAA,KAAK,MAFP;AAGE,IAAA,MAAM,MAHR;AAIE,IAAA,SAAS,MAJX;AAKE,IAAA,OAAO,EAAEd,YALX;AAME,IAAA,YAAY,EAAC,OANf;AAOE,IAAA,QAAQ,EAAE,CAACiB,CAAD,EAAIC,IAAJ,KAAa;AACrBZ,MAAAA,QAAQ,CAACY,IAAI,CAACd,KAAN,CAAR;AACD,KATH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAYE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAZF,EAaE,MAAC,IAAD,CAAM,KAAN;AAAY,IAAA,WAAW,EAAE,CAAzB;AAA4B,IAAA,KAAK,EAAEP,SAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAbF,CADF;AAiBD,CAxFD;;AA0FA,eAAeZ,UAAf","sourcesContent":["import React, { useState } from \"react\";\r\nimport useFetch from \"../utils/useFetch\";\r\nimport { Card, Dropdown } from \"semantic-ui-react\";\r\n\r\nconst StateStats = ({ country }) => {\r\n  if (country === \"world\") {\r\n    return <p>Select country to see state wise data</p>;\r\n  }\r\n\r\n  const [selectedState, setSelectedState] = useState({\r\n    provinceState: undefined\r\n  });\r\n\r\n  const { stats: states, loading, error } = useFetch(\r\n    `https://covid19.mathdro.id/api/countries/${country}/confirmed`\r\n  );\r\n\r\n  if (loading) return <p>Loading States of selected country...</p>;\r\n\r\n  if (error) return <p>Retrieving states API Error => {error.toString()}</p>;\r\n\r\n  if (states.error)\r\n    return (\r\n      <h3>\r\n        No data found. Retrieving states API error => {stats.error.message}\r\n      </h3>\r\n    );\r\n\r\n  let cardItems = [];\r\n\r\n  console.log(\"State wise info\", states);\r\n\r\n  let stateOptions = states.map(({ provinceState, countryRegion }) => ({\r\n    key: provinceState || countryRegion,\r\n    value: provinceState || countryRegion,\r\n    text: provinceState || countryRegion\r\n  }));\r\n\r\n  const onChange = selectedValue => {\r\n    const selectedState = states.find(\r\n      state => state.provinceState === selectedValue\r\n    );\r\n    console.log(\"Selected state info\", selectedState);\r\n    setSelectedState(selectedState);\r\n  };\r\n\r\n  if (selectedState.provinceState) {\r\n    cardItems = [\r\n      {\r\n        header: \"Confirmed\",\r\n        description: `${selectedState.confirmed}`,\r\n        color: \"grey\",\r\n        meta: \"\"\r\n      },\r\n      {\r\n        header: \"Active:\",\r\n        color: \"blue\",\r\n        description: `${selectedState.deaths}`,\r\n        meta: \"\"\r\n      },\r\n      {\r\n        header: \"Recovered\",\r\n        color: \"green\",\r\n        description: `${selectedState.recovered}`,\r\n        meta: \"\"\r\n      },\r\n      {\r\n        header: \"Deaths\",\r\n        color: \"red\",\r\n        description: `${selectedState.deaths}`,\r\n        meta: \"\"\r\n      }\r\n    ];\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Dropdown\r\n        placeholder='Select State'\r\n        fluid\r\n        search\r\n        selection\r\n        options={stateOptions}\r\n        defaultValue='world'\r\n        onChange={(e, data) => {\r\n          onChange(data.value);\r\n        }}\r\n      />\r\n      <br />\r\n      <Card.Group itemsPerRow={4} items={cardItems} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default StateStats;\r\n"]},"metadata":{},"sourceType":"module"}