{"ast":null,"code":"var _jsxFileName = \"C:\\\\Learning\\\\coronavirus-tracker\\\\components\\\\CountrySelector.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport useFetch from \"../utils/useFetch\";\nimport { Dropdown, Grid, Segment, Label } from \"semantic-ui-react\";\n\nconst CountrySelector = ({\n  onChange\n}) => {\n  const {\n    stats: countries,\n    error,\n    loading\n  } = useFetch(\"https://covid19.mathdro.id/api/countries\");\n  if (loading) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  }, \"Countries Loading...\");\n  if (error) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11\n    },\n    __self: this\n  }, \"Error loading countries..\"); // change value with countries.iso3[code] if iso3 code required to be passed to API\n\n  console.log(\"country selector\", countries);\n  let countryOptions = countries.countries.map(country => {\n    console.log(\"country obj\", country);\n    return {\n      key: country.name,\n      value: country.iso2,\n      text: country.name\n    };\n  });\n  countryOptions = [{\n    key: \"world\",\n    value: \"world\",\n    text: \"World\"\n  }, ...countryOptions];\n  return __jsx(React.Fragment, null, __jsx(Dropdown, {\n    placeholder: \"Select Country\",\n    fluid: true,\n    search: true,\n    selection: true,\n    options: countryOptions,\n    defaultValue: \"world\",\n    onChange: (e, data) => {\n      // console.log(\"countries=>\", data.value, countries.iso3[data.value]);\n      onChange(data.value, countries.iso3[data.value]);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }));\n};\n\nexport default CountrySelector;","map":{"version":3,"sources":["C:/Learning/coronavirus-tracker/components/CountrySelector.js"],"names":["useFetch","Dropdown","Grid","Segment","Label","CountrySelector","onChange","stats","countries","error","loading","console","log","countryOptions","map","country","key","name","value","iso2","text","e","data","iso3"],"mappings":";;;AAAA,OAAOA,QAAP,MAAqB,mBAArB;AACA,SAASC,QAAT,EAAmBC,IAAnB,EAAyBC,OAAzB,EAAkCC,KAAlC,QAA+C,mBAA/C;;AAEA,MAAMC,eAAe,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AACxC,QAAM;AAAEC,IAAAA,KAAK,EAAEC,SAAT;AAAoBC,IAAAA,KAApB;AAA2BC,IAAAA;AAA3B,MAAuCV,QAAQ,CACnD,0CADmD,CAArD;AAIA,MAAIU,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAP;AAEb,MAAID,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAAP,CAP6B,CASxC;;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCJ,SAAhC;AACA,MAAIK,cAAc,GAAGL,SAAS,CAACA,SAAV,CAAoBM,GAApB,CAAwBC,OAAO,IAAI;AACtDJ,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BG,OAA3B;AACA,WAAO;AAAEC,MAAAA,GAAG,EAAED,OAAO,CAACE,IAAf;AAAqBC,MAAAA,KAAK,EAAEH,OAAO,CAACI,IAApC;AAA0CC,MAAAA,IAAI,EAAEL,OAAO,CAACE;AAAxD,KAAP;AACD,GAHoB,CAArB;AAKAJ,EAAAA,cAAc,GAAG,CACf;AAAEG,IAAAA,GAAG,EAAE,OAAP;AAAgBE,IAAAA,KAAK,EAAE,OAAvB;AAAgCE,IAAAA,IAAI,EAAE;AAAtC,GADe,EAEf,GAAGP,cAFY,CAAjB;AAKA,SACE,4BAQE,MAAC,QAAD;AACE,IAAA,WAAW,EAAC,gBADd;AAEE,IAAA,KAAK,MAFP;AAGE,IAAA,MAAM,MAHR;AAIE,IAAA,SAAS,MAJX;AAKE,IAAA,OAAO,EAAEA,cALX;AAME,IAAA,YAAY,EAAC,OANf;AAOE,IAAA,QAAQ,EAAE,CAACQ,CAAD,EAAIC,IAAJ,KAAa;AACrB;AACAhB,MAAAA,QAAQ,CAACgB,IAAI,CAACJ,KAAN,EAAaV,SAAS,CAACe,IAAV,CAAeD,IAAI,CAACJ,KAApB,CAAb,CAAR;AACD,KAVH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARF,CADF;AAyBD,CA9CD;;AAgDA,eAAeb,eAAf","sourcesContent":["import useFetch from \"../utils/useFetch\";\r\nimport { Dropdown, Grid, Segment, Label } from \"semantic-ui-react\";\r\n\r\nconst CountrySelector = ({ onChange }) => {\r\n  const { stats: countries, error, loading } = useFetch(\r\n    \"https://covid19.mathdro.id/api/countries\"\r\n  );\r\n\r\n  if (loading) return <p>Countries Loading...</p>;\r\n\r\n  if (error) return <p>Error loading countries..</p>;\r\n\r\n  // change value with countries.iso3[code] if iso3 code required to be passed to API\r\n  console.log(\"country selector\", countries);\r\n  let countryOptions = countries.countries.map(country => {\r\n    console.log(\"country obj\", country);\r\n    return { key: country.name, value: country.iso2, text: country.name };\r\n  });\r\n\r\n  countryOptions = [\r\n    { key: \"world\", value: \"world\", text: \"World\" },\r\n    ...countryOptions\r\n  ];\r\n\r\n  return (\r\n    <>\r\n      {/* <Grid columns='equal' stackable='true'>\r\n        <Grid.Column>\r\n          <Label as='label' basic color='blue' size='big'>\r\n            Select Country\r\n          </Label>\r\n        </Grid.Column>\r\n        <Grid.Column width={13}> */}\r\n      <Dropdown\r\n        placeholder='Select Country'\r\n        fluid\r\n        search\r\n        selection\r\n        options={countryOptions}\r\n        defaultValue='world'\r\n        onChange={(e, data) => {\r\n          // console.log(\"countries=>\", data.value, countries.iso3[data.value]);\r\n          onChange(data.value, countries.iso3[data.value]);\r\n        }}\r\n      />\r\n      {/* </Grid.Column>\r\n      </Grid> */}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CountrySelector;\r\n"]},"metadata":{},"sourceType":"module"}