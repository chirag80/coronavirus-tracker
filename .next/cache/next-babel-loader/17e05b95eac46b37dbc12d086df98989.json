{"ast":null,"code":"var _jsxFileName = \"C:\\\\Learning\\\\coronavirus-tracker\\\\components\\\\StateStats.js\";\nvar __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport useFetch from \"../utils/useFetch\";\nimport { Card, Dropdown } from \"semantic-ui-react\";\n\nconst StateStats = ({\n  country\n}) => {\n  const {\n    0: selectedState,\n    1: setSelectedState\n  } = useState(undefined);\n  let cardItems = [];\n\n  if (country === \"world\") {\n    return __jsx(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 10\n      },\n      __self: this\n    }, \"Select country to see state wise data\");\n  }\n\n  const {\n    stats: states,\n    loading,\n    error\n  } = useFetch(`https://covid19.mathdro.id/api/countries/${country}/confirmed`);\n  if (loading) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, \"Loading States of selected country...\");\n  if (error) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, \"Retrieving states API Error => \", error.toString());\n  if (states.error) return __jsx(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, \"No data found. Retrieving states API error => \", stats.error.message);\n  console.log(\"State wise info\", states); //const [cardItems, setCardItems] = useState([]);\n\n  let stateOptions = states.length === 1 ? [{\n    key: states[0].countryRegion,\n    value: states[0].countryRegion,\n    text: states[0].countryRegion\n  }] : states.map(({\n    provinceState\n  }) => ({\n    key: provinceState,\n    value: provinceState,\n    text: provinceState\n  }));\n\n  const onChange = selectedValue => {\n    let selected = states.find(state => state.provinceState === selectedValue);\n    console.log(\"Selected state info\", selected);\n\n    if (!selected) {\n      selected = states[0];\n    }\n\n    console.log(\"Selected state info\", selected);\n    setSelectedState(selected);\n  };\n\n  if (selectedState) {\n    cardItems = [({\n      header: \"Confirmed\",\n      description: `${selectedState.confirmed}`,\n      color: \"grey\",\n      meta: \"\"\n    }, {\n      header: \"Active:\",\n      color: \"blue\",\n      description: `${selectedState.deaths}`,\n      meta: \"\"\n    }, {\n      header: \"Recovered\",\n      color: \"green\",\n      description: `${selectedState.recovered}`,\n      meta: \"\"\n    }, {\n      header: \"Deaths\",\n      color: \"red\",\n      description: `${selectedState.deaths}`,\n      meta: \"\"\n    })];\n  } else {\n    cardItems = [];\n  }\n\n  return __jsx(React.Fragment, null, __jsx(Dropdown, {\n    placeholder: \"Select State\",\n    fluid: true,\n    search: true,\n    selection: true,\n    options: stateOptions,\n    defaultValue: \"world\",\n    onChange: (e, data) => {\n      onChange(data.value);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }), __jsx(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }), __jsx(Card.Group, {\n    itemsPerRow: 4,\n    items: cardItems,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }));\n};\n\nexport default StateStats;","map":{"version":3,"sources":["C:/Learning/coronavirus-tracker/components/StateStats.js"],"names":["React","useState","useFetch","Card","Dropdown","StateStats","country","selectedState","setSelectedState","undefined","cardItems","stats","states","loading","error","toString","message","console","log","stateOptions","length","key","countryRegion","value","text","map","provinceState","onChange","selectedValue","selected","find","state","header","description","confirmed","color","meta","deaths","recovered","e","data"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport useFetch from \"../utils/useFetch\";\r\nimport { Card, Dropdown } from \"semantic-ui-react\";\r\n\r\nconst StateStats = ({ country }) => {\r\n  const [selectedState, setSelectedState] = useState(undefined);\r\n\r\n  let cardItems = [];\r\n  if (country === \"world\") {\r\n    return <p>Select country to see state wise data</p>;\r\n  }\r\n\r\n  const { stats: states, loading, error } = useFetch(\r\n    `https://covid19.mathdro.id/api/countries/${country}/confirmed`\r\n  );\r\n\r\n  if (loading) return <p>Loading States of selected country...</p>;\r\n\r\n  if (error) return <p>Retrieving states API Error => {error.toString()}</p>;\r\n\r\n  if (states.error)\r\n    return (\r\n      <h3>\r\n        No data found. Retrieving states API error => {stats.error.message}\r\n      </h3>\r\n    );\r\n\r\n  console.log(\"State wise info\", states);\r\n\r\n  //const [cardItems, setCardItems] = useState([]);\r\n\r\n  let stateOptions =\r\n    states.length === 1\r\n      ? [\r\n          {\r\n            key: states[0].countryRegion,\r\n            value: states[0].countryRegion,\r\n            text: states[0].countryRegion\r\n          }\r\n        ]\r\n      : states.map(({ provinceState }) => ({\r\n          key: provinceState,\r\n          value: provinceState,\r\n          text: provinceState\r\n        }));\r\n\r\n  const onChange = selectedValue => {\r\n    let selected = states.find(state => state.provinceState === selectedValue);\r\n    console.log(\"Selected state info\", selected);\r\n    if (!selected) {\r\n      selected = states[0];\r\n    }\r\n    console.log(\"Selected state info\", selected);\r\n    setSelectedState(selected);\r\n  };\r\n\r\n  if (selectedState) {\r\n    cardItems = [\r\n      ({\r\n        header: \"Confirmed\",\r\n        description: `${selectedState.confirmed}`,\r\n        color: \"grey\",\r\n        meta: \"\"\r\n      },\r\n      {\r\n        header: \"Active:\",\r\n        color: \"blue\",\r\n        description: `${selectedState.deaths}`,\r\n        meta: \"\"\r\n      },\r\n      {\r\n        header: \"Recovered\",\r\n        color: \"green\",\r\n        description: `${selectedState.recovered}`,\r\n        meta: \"\"\r\n      },\r\n      {\r\n        header: \"Deaths\",\r\n        color: \"red\",\r\n        description: `${selectedState.deaths}`,\r\n        meta: \"\"\r\n      })\r\n    ];\r\n  } else {\r\n    cardItems = [];\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Dropdown\r\n        placeholder='Select State'\r\n        fluid\r\n        search\r\n        selection\r\n        options={stateOptions}\r\n        defaultValue='world'\r\n        onChange={(e, data) => {\r\n          onChange(data.value);\r\n        }}\r\n      />\r\n      <br />\r\n      <Card.Group itemsPerRow={4} items={cardItems} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default StateStats;\r\n"]},"metadata":{},"sourceType":"module"}