{"ast":null,"code":"var _jsxFileName = \"C:\\\\Learning\\\\coronavirus-tracker\\\\components\\\\StateStats.js\";\nvar __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport useFetch from \"../utils/useFetch\";\nimport { Card, Dropdown } from \"semantic-ui-react\";\n\nvar StateStats = function StateStats(_ref) {\n  var country = _ref.country;\n\n  if (country === \"world\") {\n    return __jsx(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 7\n      },\n      __self: this\n    }, \"Select country to see state wise data\");\n  }\n\n  var _useState = useState(undefined),\n      selectedState = _useState[0],\n      setSelectedState = _useState[1];\n\n  var _useState2 = useState([]),\n      cItems = _useState2[0],\n      setcItems = _useState2[1];\n\n  var _useFetch = useFetch(\"https://covid19.mathdro.id/api/countries/\".concat(country, \"/confirmed\")),\n      states = _useFetch.stats,\n      loading = _useFetch.loading,\n      error = _useFetch.error;\n\n  if (loading) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, \"Loading States of selected country...\");\n  if (error) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, \"Retrieving states API Error => \", error.toString());\n  if (states.error) return __jsx(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, \"No data found. Retrieving states API error => \", stats.error.message);\n  var cardItems = [];\n  console.log(\"State wise info\", states);\n  var stateOptions = states.map(function (_ref2) {\n    var provinceState = _ref2.provinceState,\n        countryRegion = _ref2.countryRegion;\n    return {\n      key: provinceState || countryRegion,\n      value: provinceState || countryRegion,\n      text: provinceState || countryRegion\n    };\n  });\n\n  var _onChange = function onChange(selectedValue) {\n    var selected = states.find(function (state) {\n      return state.provinceState === selectedValue;\n    });\n    console.log(\"Selected state info\", selected);\n\n    if (!selected) {\n      selected = states[0];\n    }\n\n    setSelectedState(selected);\n  };\n\n  if (selectedState) {\n    cardItems = [{\n      header: \"Confirmed\",\n      description: \"\".concat(selectedState.confirmed),\n      color: \"grey\",\n      meta: \"\"\n    }, {\n      header: \"Active:\",\n      color: \"blue\",\n      description: \"\".concat(selectedState.deaths),\n      meta: \"\"\n    }, {\n      header: \"Recovered\",\n      color: \"green\",\n      description: \"\".concat(selectedState.recovered),\n      meta: \"\"\n    }, {\n      header: \"Deaths\",\n      color: \"red\",\n      description: \"\".concat(selectedState.deaths),\n      meta: \"\"\n    }];\n  } else {\n    console.log(\"card items emptied\");\n    cardItems = [];\n  }\n\n  return __jsx(React.Fragment, null, __jsx(Dropdown, {\n    placeholder: \"Select State\",\n    fluid: true,\n    search: true,\n    selection: true,\n    options: stateOptions,\n    defaultValue: \"world\",\n    onChange: function onChange(e, data) {\n      _onChange(data.value);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }), __jsx(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }), __jsx(Card.Group, {\n    itemsPerRow: 4,\n    items: cardItems,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }));\n};\n\nexport default StateStats;","map":{"version":3,"sources":["C:/Learning/coronavirus-tracker/components/StateStats.js"],"names":["React","useState","useFetch","Card","Dropdown","StateStats","country","undefined","selectedState","setSelectedState","cItems","setcItems","states","stats","loading","error","toString","message","cardItems","console","log","stateOptions","map","provinceState","countryRegion","key","value","text","onChange","selectedValue","selected","find","state","header","description","confirmed","color","meta","deaths","recovered","e","data"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport useFetch from \"../utils/useFetch\";\r\nimport { Card, Dropdown } from \"semantic-ui-react\";\r\n\r\nconst StateStats = ({ country }) => {\r\n  if (country === \"world\") {\r\n    return <p>Select country to see state wise data</p>;\r\n  }\r\n\r\n  const [selectedState, setSelectedState] = useState(undefined);\r\n  const [cItems, setcItems] = useState([]);\r\n  const { stats: states, loading, error } = useFetch(\r\n    `https://covid19.mathdro.id/api/countries/${country}/confirmed`\r\n  );\r\n\r\n  if (loading) return <p>Loading States of selected country...</p>;\r\n\r\n  if (error) return <p>Retrieving states API Error => {error.toString()}</p>;\r\n\r\n  if (states.error)\r\n    return (\r\n      <h3>\r\n        No data found. Retrieving states API error => {stats.error.message}\r\n      </h3>\r\n    );\r\n\r\n  let cardItems = [];\r\n\r\n  console.log(\"State wise info\", states);\r\n\r\n  let stateOptions = states.map(({ provinceState, countryRegion }) => ({\r\n    key: provinceState || countryRegion,\r\n    value: provinceState || countryRegion,\r\n    text: provinceState || countryRegion\r\n  }));\r\n\r\n  const onChange = selectedValue => {\r\n    let selected = states.find(state => state.provinceState === selectedValue);\r\n    console.log(\"Selected state info\", selected);\r\n    if (!selected) {\r\n      selected = states[0];\r\n    }\r\n    setSelectedState(selected);\r\n  };\r\n\r\n  if (selectedState) {\r\n    cardItems = [\r\n      {\r\n        header: \"Confirmed\",\r\n        description: `${selectedState.confirmed}`,\r\n        color: \"grey\",\r\n        meta: \"\"\r\n      },\r\n      {\r\n        header: \"Active:\",\r\n        color: \"blue\",\r\n        description: `${selectedState.deaths}`,\r\n        meta: \"\"\r\n      },\r\n      {\r\n        header: \"Recovered\",\r\n        color: \"green\",\r\n        description: `${selectedState.recovered}`,\r\n        meta: \"\"\r\n      },\r\n      {\r\n        header: \"Deaths\",\r\n        color: \"red\",\r\n        description: `${selectedState.deaths}`,\r\n        meta: \"\"\r\n      }\r\n    ];\r\n  } else {\r\n    console.log(\"card items emptied\");\r\n    cardItems = [];\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Dropdown\r\n        placeholder='Select State'\r\n        fluid\r\n        search\r\n        selection\r\n        options={stateOptions}\r\n        defaultValue='world'\r\n        onChange={(e, data) => {\r\n          onChange(data.value);\r\n        }}\r\n      />\r\n      <br />\r\n      <Card.Group itemsPerRow={4} items={cardItems} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default StateStats;\r\n"]},"metadata":{},"sourceType":"module"}