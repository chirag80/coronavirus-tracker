{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useState, useEffect, useRef } from \"react\";\nexport default (function (url) {\n  var isCurrent = useRef(true);\n\n  var _useState = useState(),\n      stats = _useState[0],\n      setStats = _useState[1];\n\n  var _useState2 = useState(true),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      error = _useState3[0],\n      setError = _useState3[1];\n\n  useEffect(function () {\n    return function () {\n      // called when the component is going to unmount\n      isCurrent.current = false;\n    };\n  }, []);\n\n  var getStats = function getStats() {\n    var data, response;\n    return _regeneratorRuntime.async(function getStats$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            console.log(\"UseFetch invoked:\", url);\n            _context.prev = 1;\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(fetch(url));\n\n          case 4:\n            response = _context.sent;\n            _context.next = 7;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 7:\n            data = _context.sent;\n            if (isCurrent.current) setStats(data);\n            _context.next = 15;\n            break;\n\n          case 11:\n            _context.prev = 11;\n            _context.t0 = _context[\"catch\"](1);\n            setError(_context.t0);\n            setStats(null);\n\n          case 15:\n            if (isCurrent.current) setLoading(false);\n\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[1, 11]], Promise);\n  };\n\n  useEffect(function () {\n    if (url) getStats();\n  }, [url, setStats]);\n  return {\n    stats: stats,\n    loading: loading,\n    error: error\n  };\n}); // export default function Example() {\n//   const [data, dataSet] = useState(false);\n//   async function fetchMyAPI() {\n//     let response = await fetch(\"api/data\");\n//     response = await res.json();\n//     dataSet(response);\n//   }\n//   useEffect(() => {\n//     fetchMyAPI();\n//   }, []);\n//   return <div>{data}</div>;\n// }","map":null,"metadata":{},"sourceType":"module"}