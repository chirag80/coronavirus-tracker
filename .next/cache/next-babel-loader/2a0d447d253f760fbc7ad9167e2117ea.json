{"ast":null,"code":"var _jsxFileName = \"C:\\\\Learning\\\\coronavirus-tracker\\\\components\\\\StateStats.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect, useMemo } from \"react\";\nimport useFetch from \"../utils/useFetch\";\nimport { Card, Dropdown, Button, Grid } from \"semantic-ui-react\";\nimport { numberWithCommas } from \"../utils/format\";\nimport BarChart from \"./BarChart\";\n\nvar StateStats = function StateStats(_ref) {\n  var iso3 = _ref.iso3,\n      iso2 = _ref.iso2;\n\n  //console.log(\"state stats =>\", country);\n  var _useState = useState(undefined),\n      selectedState = _useState[0],\n      setSelectedState = _useState[1];\n\n  var handleBtnClick = function handleBtnClick(iso2, provinceState) {\n    iso3 = \"USA\";\n    setSelectedState({\n      iso2: iso2,\n      provinceState: provinceState\n    });\n  };\n\n  if (iso3 === \"\") {\n    return __jsx(React.Fragment, null, __jsx(Grid, {\n      columns: \"equal\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19\n      },\n      __self: this\n    }, __jsx(Grid.Column, {\n      width: 8,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    }, __jsx(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21\n      },\n      __self: this\n    }, \"Select country above to see state wise data Or quick link =>\")), __jsx(Grid.Column, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }, __jsx(Button, {\n      basic: true,\n      size: \"mini\",\n      color: \"blue\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, \"New Jersey\")), __jsx(Grid.Column, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }, __jsx(Button, {\n      basic: true,\n      size: \"mini\",\n      onClick: function onClick(e, data) {\n        handleBtnClick(data);\n      },\n      color: \"blue\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, \"New York\")), __jsx(Grid.Column, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, __jsx(Button, {\n      basic: true,\n      size: \"mini\",\n      onClick: handleBtnClick(event, data),\n      color: \"blue\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, \"California\")), __jsx(Grid.Column, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, __jsx(Button, {\n      basic: true,\n      size: \"mini\",\n      onClick: handleBtnClick(event, data),\n      color: \"blue\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, \"India\"))));\n  }\n\n  var memoBarChartComp = useMemo(function () {\n    return __jsx(BarChart, {\n      selectedState: selectedState,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    });\n  }, [selectedState]);\n  useEffect(function () {\n    setSelectedState(undefined);\n  }, [iso3]);\n\n  var _useFetch = useFetch(\"https://covid19.mathdro.id/api/countries/\".concat(iso3, \"/confirmed\")),\n      states = _useFetch.stats,\n      loading = _useFetch.loading,\n      error = _useFetch.error;\n\n  if (loading) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, \"Loading States of selected country...\");\n  if (error) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, \"Retrieving states API Error => \", error.toString());\n  if (states.error) return __jsx(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, \"No data found. Retrieving states API error => \", stats.error.message); //console.log(\"State wise info\", states);\n\n  var stateOptions = states.map(function (_ref2, index) {\n    var provinceState = _ref2.provinceState,\n        countryRegion = _ref2.countryRegion;\n    return {\n      key: provinceState || countryRegion,\n      value: provinceState || countryRegion,\n      text: provinceState || countryRegion\n    };\n  });\n\n  var _onChange = function onChange(selectedValue) {\n    var selected = states.find(function (state) {\n      return state.provinceState === selectedValue;\n    }); // console.log(\"Selected state info\", selected);\n\n    if (!selected) {\n      selected = states[0];\n    }\n\n    setSelectedState(selected);\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Dropdown, {\n    placeholder: \"Select State\",\n    fluid: true,\n    search: true,\n    selection: true,\n    selectOnBlur: false,\n    options: stateOptions,\n    onChange: function onChange(e, data) {\n      _onChange(data.value);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }), selectedState && __jsx(React.Fragment, null, __jsx(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }), __jsx(Card.Group, {\n    stackable: true,\n    itemsPerRow: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }, __jsx(Card, {\n    header: \"Total\",\n    description: selectedState && numberWithCommas(selectedState.confirmed),\n    color: \"grey\",\n    meta: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }), __jsx(Card, {\n    header: \"Active\",\n    description: selectedState && numberWithCommas(selectedState.active),\n    color: \"blue\",\n    meta: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }), __jsx(Card, {\n    header: \"Recovered\",\n    description: selectedState && numberWithCommas(selectedState.recovered),\n    color: \"green\",\n    meta: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }), __jsx(Card, {\n    header: \"Deaths\",\n    description: selectedState && numberWithCommas(selectedState.deaths),\n    color: \"red\",\n    meta: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  }))), selectedState && memoBarChartComp);\n};\n\nexport default StateStats;","map":{"version":3,"sources":["C:/Learning/coronavirus-tracker/components/StateStats.js"],"names":["React","useState","useEffect","useMemo","useFetch","Card","Dropdown","Button","Grid","numberWithCommas","BarChart","StateStats","iso3","iso2","undefined","selectedState","setSelectedState","handleBtnClick","provinceState","e","data","event","memoBarChartComp","states","stats","loading","error","toString","message","stateOptions","map","index","countryRegion","key","value","text","onChange","selectedValue","selected","find","state","confirmed","active","recovered","deaths"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useMemo } from \"react\";\r\nimport useFetch from \"../utils/useFetch\";\r\nimport { Card, Dropdown, Button, Grid } from \"semantic-ui-react\";\r\nimport { numberWithCommas } from \"../utils/format\";\r\nimport BarChart from \"./BarChart\";\r\n\r\nconst StateStats = ({ iso3, iso2 }) => {\r\n  //console.log(\"state stats =>\", country);\r\n  const [selectedState, setSelectedState] = useState(undefined);\r\n\r\n  const handleBtnClick = (iso2, provinceState) => {\r\n    iso3 = \"USA\";\r\n    setSelectedState({ iso2, provinceState });\r\n  };\r\n\r\n  if (iso3 === \"\") {\r\n    return (\r\n      <>\r\n        <Grid columns='equal'>\r\n          <Grid.Column width={8}>\r\n            <h4>\r\n              Select country above to see state wise data Or quick link =>\r\n            </h4>\r\n          </Grid.Column>\r\n          <Grid.Column>\r\n            <Button basic size='mini' color='blue'>\r\n              New Jersey\r\n            </Button>\r\n          </Grid.Column>\r\n          <Grid.Column>\r\n            <Button\r\n              basic\r\n              size='mini'\r\n              onClick={(e, data) => {\r\n                handleBtnClick(data);\r\n              }}\r\n              color='blue'\r\n            >\r\n              New York\r\n            </Button>\r\n          </Grid.Column>\r\n          <Grid.Column>\r\n            <Button\r\n              basic\r\n              size='mini'\r\n              onClick={handleBtnClick(event, data)}\r\n              color='blue'\r\n            >\r\n              California\r\n            </Button>\r\n          </Grid.Column>\r\n          <Grid.Column>\r\n            <Button\r\n              basic\r\n              size='mini'\r\n              onClick={handleBtnClick(event, data)}\r\n              color='blue'\r\n            >\r\n              India\r\n            </Button>\r\n          </Grid.Column>\r\n        </Grid>\r\n      </>\r\n    );\r\n  }\r\n\r\n  const memoBarChartComp = useMemo(\r\n    () => <BarChart selectedState={selectedState} />,\r\n    [selectedState]\r\n  );\r\n\r\n  useEffect(() => {\r\n    setSelectedState(undefined);\r\n  }, [iso3]);\r\n\r\n  const { stats: states, loading, error } = useFetch(\r\n    `https://covid19.mathdro.id/api/countries/${iso3}/confirmed`\r\n  );\r\n\r\n  if (loading) return <p>Loading States of selected country...</p>;\r\n\r\n  if (error) return <p>Retrieving states API Error => {error.toString()}</p>;\r\n\r\n  if (states.error)\r\n    return (\r\n      <h3>\r\n        No data found. Retrieving states API error => {stats.error.message}\r\n      </h3>\r\n    );\r\n\r\n  //console.log(\"State wise info\", states);\r\n\r\n  let stateOptions = states.map(({ provinceState, countryRegion }, index) => ({\r\n    key: provinceState || countryRegion,\r\n    value: provinceState || countryRegion,\r\n    text: provinceState || countryRegion\r\n  }));\r\n\r\n  const onChange = selectedValue => {\r\n    let selected = states.find(state => state.provinceState === selectedValue);\r\n    // console.log(\"Selected state info\", selected);\r\n    if (!selected) {\r\n      selected = states[0];\r\n    }\r\n    setSelectedState(selected);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Dropdown\r\n        placeholder='Select State'\r\n        fluid\r\n        search\r\n        selection\r\n        selectOnBlur={false}\r\n        options={stateOptions}\r\n        onChange={(e, data) => {\r\n          onChange(data.value);\r\n        }}\r\n      />\r\n      {selectedState && (\r\n        <>\r\n          <br />\r\n          <Card.Group stackable={true} itemsPerRow={4}>\r\n            <Card\r\n              header='Total'\r\n              description={\r\n                selectedState && numberWithCommas(selectedState.confirmed)\r\n              }\r\n              color='grey'\r\n              meta=''\r\n            />\r\n            <Card\r\n              header='Active'\r\n              description={\r\n                selectedState && numberWithCommas(selectedState.active)\r\n              }\r\n              color='blue'\r\n              meta=''\r\n            />\r\n            <Card\r\n              header='Recovered'\r\n              description={\r\n                selectedState && numberWithCommas(selectedState.recovered)\r\n              }\r\n              color='green'\r\n              meta=''\r\n            />\r\n            <Card\r\n              header='Deaths'\r\n              description={\r\n                selectedState && numberWithCommas(selectedState.deaths)\r\n              }\r\n              color='red'\r\n              meta=''\r\n            />\r\n          </Card.Group>\r\n        </>\r\n      )}\r\n      {selectedState && memoBarChartComp}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default StateStats;\r\n"]},"metadata":{},"sourceType":"module"}