{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nvar _jsxFileName = \"C:\\\\Learning\\\\coronavirus-tracker\\\\components\\\\CountrySelector.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport useFetch from \"../utils/useFetch\";\nimport { Dropdown, Grid, Segment, Label } from \"semantic-ui-react\";\n\nvar CountrySelector = function CountrySelector(_ref) {\n  var _onChange = _ref.onChange;\n\n  var _useFetch = useFetch(\"https://covid19.mathdro.id/api/countries\"),\n      countries = _useFetch.stats,\n      error = _useFetch.error,\n      loading = _useFetch.loading;\n\n  if (loading) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  }, \"Countries Loading...\");\n  if (error) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11\n    },\n    __self: this\n  }, \"Error loading countries..\"); // change value with countries.iso3[code] if iso3 code required to be passed to API\n\n  console.log(\"country selector\", countries);\n  var countryOptions = countries.countries.map(function (country) {\n    return {\n      key: country.name,\n      value: country.iso2,\n      text: country.name,\n      iso3: country.iso3\n    };\n  });\n  countryOptions = [{\n    key: \"world\",\n    value: \"world\",\n    text: \"World\",\n    iso3: \"World\"\n  }].concat(_toConsumableArray(countryOptions));\n  return __jsx(React.Fragment, null, __jsx(Dropdown, {\n    placeholder: \"Select Country\",\n    fluid: true,\n    search: true,\n    selection: true,\n    options: countryOptions,\n    defaultValue: \"world\",\n    onChange: function onChange(e, data) {\n      // console.log(\"countries=>\", data.value, countries.iso3[data.value]);\n      _onChange(data.value, countries.iso3[data.value]);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }));\n};\n\nexport default CountrySelector;","map":{"version":3,"sources":["C:/Learning/coronavirus-tracker/components/CountrySelector.js"],"names":["useFetch","Dropdown","Grid","Segment","Label","CountrySelector","onChange","countries","stats","error","loading","console","log","countryOptions","map","country","key","name","value","iso2","text","iso3","e","data"],"mappings":";;;;AAAA,OAAOA,QAAP,MAAqB,mBAArB;AACA,SAASC,QAAT,EAAmBC,IAAnB,EAAyBC,OAAzB,EAAkCC,KAAlC,QAA+C,mBAA/C;;AAEA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,OAAkB;AAAA,MAAfC,SAAe,QAAfA,QAAe;;AAAA,kBACKN,QAAQ,CACnD,0CADmD,CADb;AAAA,MACzBO,SADyB,aAChCC,KADgC;AAAA,MACdC,KADc,aACdA,KADc;AAAA,MACPC,OADO,aACPA,OADO;;AAKxC,MAAIA,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAP;AAEb,MAAID,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAAP,CAP6B,CASxC;;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCL,SAAhC;AACA,MAAIM,cAAc,GAAGN,SAAS,CAACA,SAAV,CAAoBO,GAApB,CAAwB,UAAAC,OAAO,EAAI;AACtD,WAAO;AACLC,MAAAA,GAAG,EAAED,OAAO,CAACE,IADR;AAELC,MAAAA,KAAK,EAAEH,OAAO,CAACI,IAFV;AAGLC,MAAAA,IAAI,EAAEL,OAAO,CAACE,IAHT;AAILI,MAAAA,IAAI,EAAEN,OAAO,CAACM;AAJT,KAAP;AAMD,GAPoB,CAArB;AASAR,EAAAA,cAAc,IACZ;AAAEG,IAAAA,GAAG,EAAE,OAAP;AAAgBE,IAAAA,KAAK,EAAE,OAAvB;AAAgCE,IAAAA,IAAI,EAAE,OAAtC;AAA+CC,IAAAA,IAAI,EAAE;AAArD,GADY,4BAETR,cAFS,EAAd;AAKA,SACE,4BAQE,MAAC,QAAD;AACE,IAAA,WAAW,EAAC,gBADd;AAEE,IAAA,KAAK,MAFP;AAGE,IAAA,MAAM,MAHR;AAIE,IAAA,SAAS,MAJX;AAKE,IAAA,OAAO,EAAEA,cALX;AAME,IAAA,YAAY,EAAC,OANf;AAOE,IAAA,QAAQ,EAAE,kBAACS,CAAD,EAAIC,IAAJ,EAAa;AACrB;AACAjB,MAAAA,SAAQ,CAACiB,IAAI,CAACL,KAAN,EAAaX,SAAS,CAACc,IAAV,CAAeE,IAAI,CAACL,KAApB,CAAb,CAAR;AACD,KAVH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARF,CADF;AAyBD,CAlDD;;AAoDA,eAAeb,eAAf","sourcesContent":["import useFetch from \"../utils/useFetch\";\r\nimport { Dropdown, Grid, Segment, Label } from \"semantic-ui-react\";\r\n\r\nconst CountrySelector = ({ onChange }) => {\r\n  const { stats: countries, error, loading } = useFetch(\r\n    \"https://covid19.mathdro.id/api/countries\"\r\n  );\r\n\r\n  if (loading) return <p>Countries Loading...</p>;\r\n\r\n  if (error) return <p>Error loading countries..</p>;\r\n\r\n  // change value with countries.iso3[code] if iso3 code required to be passed to API\r\n  console.log(\"country selector\", countries);\r\n  let countryOptions = countries.countries.map(country => {\r\n    return {\r\n      key: country.name,\r\n      value: country.iso2,\r\n      text: country.name,\r\n      iso3: country.iso3\r\n    };\r\n  });\r\n\r\n  countryOptions = [\r\n    { key: \"world\", value: \"world\", text: \"World\", iso3: \"World\" },\r\n    ...countryOptions\r\n  ];\r\n\r\n  return (\r\n    <>\r\n      {/* <Grid columns='equal' stackable='true'>\r\n        <Grid.Column>\r\n          <Label as='label' basic color='blue' size='big'>\r\n            Select Country\r\n          </Label>\r\n        </Grid.Column>\r\n        <Grid.Column width={13}> */}\r\n      <Dropdown\r\n        placeholder='Select Country'\r\n        fluid\r\n        search\r\n        selection\r\n        options={countryOptions}\r\n        defaultValue='world'\r\n        onChange={(e, data) => {\r\n          // console.log(\"countries=>\", data.value, countries.iso3[data.value]);\r\n          onChange(data.value, countries.iso3[data.value]);\r\n        }}\r\n      />\r\n      {/* </Grid.Column>\r\n      </Grid> */}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CountrySelector;\r\n"]},"metadata":{},"sourceType":"module"}