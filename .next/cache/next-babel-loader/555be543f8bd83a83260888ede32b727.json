{"ast":null,"code":"const getChartDate = (chartType, apiData) => {\n  console.log(\"Api data\", apiData.slice(-10));\n  let sliced = apiData.slice(-40);\n  return {\n    labels: sliced.map(it => it.reportDateString),\n    datasets: [{\n      label: \"Total Confirmed Cases\",\n      fill: false,\n      lineTension: 0.1,\n      backgroundColor: \"rgba(75,192,192,0.4)\",\n      borderColor: \"rgba(75,192,192,1)\",\n      borderCapStyle: \"butt\",\n      borderDash: [],\n      borderDashOffset: 0.0,\n      borderJoinStyle: \"miter\",\n      pointBorderColor: \"rgba(75,192,192,1)\",\n      pointBackgroundColor: \"#fff\",\n      pointBorderWidth: 1,\n      pointHoverRadius: 5,\n      pointHoverBackgroundColor: \"rgba(75,192,192,1)\",\n      pointHoverBorderColor: \"rgba(220,220,220,1)\",\n      pointHoverBorderWidth: 2,\n      pointRadius: 1,\n      pointHitRadius: 10,\n      data: sliced.map(it => it.totalConfirmed)\n    }, {\n      label: \"China\",\n      fill: false,\n      lineTension: 0.1,\n      backgroundColor: \"orange\",\n      borderColor: \"orange\",\n      borderCapStyle: \"butt\",\n      borderDash: [],\n      borderDashOffset: 0.0,\n      borderJoinStyle: \"miter\",\n      pointBorderColor: \"rgba(75,192,192,1)\",\n      pointBackgroundColor: \"#fff\",\n      pointBorderWidth: 1,\n      pointHoverRadius: 5,\n      pointHoverBackgroundColor: \"rgba(75,192,192,1)\",\n      pointHoverBorderColor: \"rgba(220,220,220,1)\",\n      pointHoverBorderWidth: 2,\n      pointRadius: 1,\n      pointHitRadius: 10,\n      data: sliced.map(it => it.mainlandChina)\n    }]\n  };\n};\n\nconst getChartOptions = type => {\n  return {\n    legend: {\n      position: \"top\",\n      labels: {\n        usePointStyle: true,\n        boxWidth: 8\n      }\n    },\n    tooltips: {\n      mode: \"index\"\n    },\n    scales: {\n      xAxes,\n      yAxes\n    },\n    title: {\n      display: \"Display\",\n      text: \"Text\"\n    }\n  };\n};\n\nconst xAxes = [{\n  type: \"time\",\n  distribution: \"series\",\n  ticks: {\n    major: {\n      enabled: true,\n      fontStyle: \"bold\"\n    },\n    source: \"data\",\n    autoSkip: true,\n    autoSkipPadding: 0,\n    maxRotation: 25\n  },\n  time: {\n    tooltipFormat: \"MM/DD/YYYY\",\n    displayFormats: {\n      month: \"MMM DD\"\n    }\n  }\n}];\nconst yAxes = [{}];\nexport { getChartDate, getChartOptions };","map":{"version":3,"sources":["C:/Learning/coronavirus-tracker/utils/chartUtils.js"],"names":["getChartDate","chartType","apiData","console","log","slice","sliced","labels","map","it","reportDateString","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","data","totalConfirmed","mainlandChina","getChartOptions","type","legend","position","usePointStyle","boxWidth","tooltips","mode","scales","xAxes","yAxes","title","display","text","distribution","ticks","major","enabled","fontStyle","source","autoSkip","autoSkipPadding","maxRotation","time","tooltipFormat","displayFormats","month"],"mappings":"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","sourcesContent":["const getChartDate = (chartType, apiData) => {\r\n  console.log(\"Api data\", apiData.slice(-10));\r\n  let sliced = apiData.slice(-40);\r\n\r\n  return {\r\n    labels: sliced.map(it => it.reportDateString),\r\n    datasets: [\r\n      {\r\n        label: \"Total Confirmed Cases\",\r\n        fill: false,\r\n        lineTension: 0.1,\r\n        backgroundColor: \"rgba(75,192,192,0.4)\",\r\n        borderColor: \"rgba(75,192,192,1)\",\r\n        borderCapStyle: \"butt\",\r\n        borderDash: [],\r\n        borderDashOffset: 0.0,\r\n        borderJoinStyle: \"miter\",\r\n        pointBorderColor: \"rgba(75,192,192,1)\",\r\n        pointBackgroundColor: \"#fff\",\r\n        pointBorderWidth: 1,\r\n        pointHoverRadius: 5,\r\n        pointHoverBackgroundColor: \"rgba(75,192,192,1)\",\r\n        pointHoverBorderColor: \"rgba(220,220,220,1)\",\r\n        pointHoverBorderWidth: 2,\r\n        pointRadius: 1,\r\n        pointHitRadius: 10,\r\n        data: sliced.map(it => it.totalConfirmed)\r\n      },\r\n      {\r\n        label: \"China\",\r\n        fill: false,\r\n        lineTension: 0.1,\r\n        backgroundColor: \"orange\",\r\n        borderColor: \"orange\",\r\n        borderCapStyle: \"butt\",\r\n        borderDash: [],\r\n        borderDashOffset: 0.0,\r\n        borderJoinStyle: \"miter\",\r\n        pointBorderColor: \"rgba(75,192,192,1)\",\r\n        pointBackgroundColor: \"#fff\",\r\n        pointBorderWidth: 1,\r\n        pointHoverRadius: 5,\r\n        pointHoverBackgroundColor: \"rgba(75,192,192,1)\",\r\n        pointHoverBorderColor: \"rgba(220,220,220,1)\",\r\n        pointHoverBorderWidth: 2,\r\n        pointRadius: 1,\r\n        pointHitRadius: 10,\r\n        data: sliced.map(it => it.mainlandChina)\r\n      }\r\n    ]\r\n  };\r\n};\r\n\r\nconst getChartOptions = type => {\r\n  return {\r\n    legend: {\r\n      position: \"top\",\r\n      labels: {\r\n        usePointStyle: true,\r\n        boxWidth: 8\r\n      }\r\n    },\r\n    tooltips: {\r\n      mode: \"index\"\r\n    },\r\n    scales: {\r\n      xAxes,\r\n      yAxes\r\n    },\r\n    title: {\r\n      display: \"Display\",\r\n      text: \"Text\"\r\n    }\r\n  };\r\n};\r\n\r\nconst xAxes = [\r\n  {\r\n    type: \"time\",\r\n    distribution: \"series\",\r\n    ticks: {\r\n      major: {\r\n        enabled: true,\r\n        fontStyle: \"bold\"\r\n      },\r\n      source: \"data\",\r\n      autoSkip: true,\r\n      autoSkipPadding: 0,\r\n      maxRotation: 25\r\n    },\r\n    time: {\r\n      tooltipFormat: \"MM/DD/YYYY\",\r\n      displayFormats: {\r\n        month: \"MMM DD\"\r\n      }\r\n    }\r\n  }\r\n];\r\n\r\nconst yAxes = [{}];\r\nexport { getChartDate, getChartOptions };\r\n"]},"metadata":{},"sourceType":"module"}