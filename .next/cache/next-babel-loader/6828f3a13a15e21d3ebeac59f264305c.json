{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useState, useEffect, useRef } from \"react\";\nexport default (function (url) {\n  var isCurrent = useRef(true);\n\n  var _useState = useState(),\n      stats = _useState[0],\n      setStats = _useState[1];\n\n  var _useState2 = useState(true),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      error = _useState3[0],\n      setError = _useState3[1];\n\n  useEffect(function () {\n    return function () {\n      // called when the component is going to unmount\n      isCurrent.current = false;\n    };\n  }, []);\n\n  var getStats = function getStats() {\n    var data, response;\n    return _regeneratorRuntime.async(function getStats$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            console.log(\"UseFetch invoked:\", url);\n            _context.prev = 1;\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(fetch(url));\n\n          case 4:\n            response = _context.sent;\n            _context.next = 7;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 7:\n            data = _context.sent;\n            if (isCurrent.current) setStats(data);\n            _context.next = 15;\n            break;\n\n          case 11:\n            _context.prev = 11;\n            _context.t0 = _context[\"catch\"](1);\n            setError(_context.t0);\n            setStats(null);\n\n          case 15:\n            if (isCurrent.current) setLoading(false);\n\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[1, 11]], Promise);\n  };\n\n  useEffect(function () {\n    if (url) getStats();\n  }, [url, setStats]);\n  return {\n    stats: stats,\n    loading: loading,\n    error: error\n  };\n}); // export default function Example() {\n//   const [data, dataSet] = useState(false);\n//   async function fetchMyAPI() {\n//     let response = await fetch(\"api/data\");\n//     response = await res.json();\n//     dataSet(response);\n//   }\n//   useEffect(() => {\n//     fetchMyAPI();\n//   }, []);\n//   return <div>{data}</div>;\n// }","map":{"version":3,"sources":["C:/Learning/coronavirus-tracker/utils/useFetch.js"],"names":["useState","useEffect","useRef","url","isCurrent","stats","setStats","loading","setLoading","error","setError","current","getStats","console","log","fetch","response","json","data"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,MAA9B,QAA4C,OAA5C;AAEA,gBAAe,UAAAC,GAAG,EAAI;AACpB,MAAMC,SAAS,GAAGF,MAAM,CAAC,IAAD,CAAxB;;AADoB,kBAEMF,QAAQ,EAFd;AAAA,MAEbK,KAFa;AAAA,MAENC,QAFM;;AAAA,mBAGUN,QAAQ,CAAC,IAAD,CAHlB;AAAA,MAGbO,OAHa;AAAA,MAGJC,UAHI;;AAAA,mBAIMR,QAAQ,CAAC,EAAD,CAJd;AAAA,MAIbS,KAJa;AAAA,MAINC,QAJM;;AAMpBT,EAAAA,SAAS,CAAC,YAAM;AACd,WAAO,YAAM;AACX;AACAG,MAAAA,SAAS,CAACO,OAAV,GAAoB,KAApB;AACD,KAHD;AAID,GALQ,EAKN,EALM,CAAT;;AAOA,MAAMC,QAAQ,GAAG,SAAXA,QAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AACfC,YAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCX,GAAjC;AADe;AAAA;AAAA,6CAIQY,KAAK,CAACZ,GAAD,CAJb;;AAAA;AAITa,YAAAA,QAJS;AAAA;AAAA,6CAKAA,QAAQ,CAACC,IAAT,EALA;;AAAA;AAKbC,YAAAA,IALa;AAMb,gBAAId,SAAS,CAACO,OAAd,EAAuBL,QAAQ,CAACY,IAAD,CAAR;AANV;AAAA;;AAAA;AAAA;AAAA;AAQbR,YAAAA,QAAQ,aAAR;AACAJ,YAAAA,QAAQ,CAAC,IAAD,CAAR;;AATa;AAWf,gBAAIF,SAAS,CAACO,OAAd,EAAuBH,UAAU,CAAC,KAAD,CAAV;;AAXR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjB;;AAcAP,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIE,GAAJ,EAASS,QAAQ;AAClB,GAFQ,EAEN,CAACT,GAAD,EAAMG,QAAN,CAFM,CAAT;AAIA,SAAO;AAAED,IAAAA,KAAK,EAALA,KAAF;AAASE,IAAAA,OAAO,EAAPA,OAAT;AAAkBE,IAAAA,KAAK,EAALA;AAAlB,GAAP;AACD,CAhCD,E,CAkCA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA","sourcesContent":["import { useState, useEffect, useRef } from \"react\";\r\n\r\nexport default url => {\r\n  const isCurrent = useRef(true);\r\n  const [stats, setStats] = useState();\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      // called when the component is going to unmount\r\n      isCurrent.current = false;\r\n    };\r\n  }, []);\r\n\r\n  const getStats = async () => {\r\n    console.log(\"UseFetch invoked:\", url);\r\n    let data;\r\n    try {\r\n      let response = await fetch(url);\r\n      data = await response.json();\r\n      if (isCurrent.current) setStats(data);\r\n    } catch (err) {\r\n      setError(err);\r\n      setStats(null);\r\n    }\r\n    if (isCurrent.current) setLoading(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (url) getStats();\r\n  }, [url, setStats]);\r\n\r\n  return { stats, loading, error };\r\n};\r\n\r\n// export default function Example() {\r\n//   const [data, dataSet] = useState(false);\r\n\r\n//   async function fetchMyAPI() {\r\n//     let response = await fetch(\"api/data\");\r\n//     response = await res.json();\r\n//     dataSet(response);\r\n//   }\r\n\r\n//   useEffect(() => {\r\n//     fetchMyAPI();\r\n//   }, []);\r\n\r\n//   return <div>{data}</div>;\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}