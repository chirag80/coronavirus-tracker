{"ast":null,"code":"var _jsxFileName = \"C:\\\\Learning\\\\coronavirus-tracker\\\\components\\\\StateStats.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from \"react\";\nimport useFetch from \"../utils/useFetch\";\nimport { Card, Dropdown } from \"semantic-ui-react\";\n\nconst StateStats = ({\n  country\n}) => {\n  if (country === \"world\") {\n    return __jsx(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 7\n      },\n      __self: this\n    }, \"Select country to see state wise data\");\n  }\n\n  const {\n    0: selectedState,\n    1: setSelectedState\n  } = useState(undefined);\n  useEffect(() => {\n    setSelectedState(undefined);\n  }, [country]);\n  const {\n    stats: states,\n    loading,\n    error\n  } = useFetch(`https://covid19.mathdro.id/api/countries/${country}/confirmed`);\n  if (loading) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, \"Loading States of selected country...\");\n  if (error) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, \"Retrieving states API Error => \", error.toString());\n  if (states.error) return __jsx(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, \"No data found. Retrieving states API error => \", stats.error.message);\n  console.log(\"State wise info\", states);\n  let stateOptions = states.map(({\n    provinceState,\n    countryRegion\n  }, index) => ({\n    key: provinceState || countryRegion,\n    value: provinceState || countryRegion,\n    text: provinceState || countryRegion,\n    selected: index === 0 && true\n  }));\n\n  const onChange = selectedValue => {\n    let selected = states.find(state => state.provinceState === selectedValue);\n    console.log(\"Selected state info\", selected);\n\n    if (!selected) {\n      selected = states[0];\n    }\n\n    setSelectedState(selected);\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Dropdown, {\n    placeholder: \"Select State\",\n    fluid: true,\n    search: true,\n    selection: true,\n    selectOnBlur: false,\n    options: stateOptions,\n    onChange: (e, data) => {\n      onChange(data.value);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }), __jsx(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }), __jsx(Card.Group, {\n    itemsPerRow: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, __jsx(Card, {\n    header: \"Confirmed\",\n    description: selectedState && selectedState.confirmed,\n    color: \"grey\",\n    meta: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }), __jsx(Card, {\n    header: \"Active\",\n    description: selectedState && selectedState.active,\n    color: \"blue\",\n    meta: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }), __jsx(Card, {\n    header: \"Recovered\",\n    description: selectedState && selectedState.recovered,\n    color: \"green\",\n    meta: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }), __jsx(Card, {\n    header: \"Deaths\",\n    description: selectedState && selectedState.deaths,\n    color: \"red\",\n    meta: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  })));\n};\n\nexport default StateStats;","map":{"version":3,"sources":["C:/Learning/coronavirus-tracker/components/StateStats.js"],"names":["React","useState","useEffect","useFetch","Card","Dropdown","StateStats","country","selectedState","setSelectedState","undefined","stats","states","loading","error","toString","message","console","log","stateOptions","map","provinceState","countryRegion","index","key","value","text","selected","onChange","selectedValue","find","state","e","data","confirmed","active","recovered","deaths"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport useFetch from \"../utils/useFetch\";\r\nimport { Card, Dropdown } from \"semantic-ui-react\";\r\n\r\nconst StateStats = ({ country }) => {\r\n  if (country === \"world\") {\r\n    return <p>Select country to see state wise data</p>;\r\n  }\r\n\r\n  const [selectedState, setSelectedState] = useState(undefined);\r\n\r\n  useEffect(() => {\r\n    setSelectedState(undefined);\r\n  }, [country]);\r\n\r\n  const { stats: states, loading, error } = useFetch(\r\n    `https://covid19.mathdro.id/api/countries/${country}/confirmed`\r\n  );\r\n\r\n  if (loading) return <p>Loading States of selected country...</p>;\r\n\r\n  if (error) return <p>Retrieving states API Error => {error.toString()}</p>;\r\n\r\n  if (states.error)\r\n    return (\r\n      <h3>\r\n        No data found. Retrieving states API error => {stats.error.message}\r\n      </h3>\r\n    );\r\n\r\n  console.log(\"State wise info\", states);\r\n\r\n  let stateOptions = states.map(({ provinceState, countryRegion }, index) => ({\r\n    key: provinceState || countryRegion,\r\n    value: provinceState || countryRegion,\r\n    text: provinceState || countryRegion,\r\n    selected: index === 0 && true\r\n  }));\r\n\r\n  const onChange = selectedValue => {\r\n    let selected = states.find(state => state.provinceState === selectedValue);\r\n    console.log(\"Selected state info\", selected);\r\n    if (!selected) {\r\n      selected = states[0];\r\n    }\r\n    setSelectedState(selected);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Dropdown\r\n        placeholder='Select State'\r\n        fluid\r\n        search\r\n        selection\r\n        selectOnBlur={false}\r\n        options={stateOptions}\r\n        onChange={(e, data) => {\r\n          onChange(data.value);\r\n        }}\r\n      />\r\n      <br />\r\n      <Card.Group itemsPerRow={4}>\r\n        <Card\r\n          header='Confirmed'\r\n          description={selectedState && selectedState.confirmed}\r\n          color='grey'\r\n          meta=''\r\n        />\r\n        <Card\r\n          header='Active'\r\n          description={selectedState && selectedState.active}\r\n          color='blue'\r\n          meta=''\r\n        />\r\n        <Card\r\n          header='Recovered'\r\n          description={selectedState && selectedState.recovered}\r\n          color='green'\r\n          meta=''\r\n        />\r\n        <Card\r\n          header='Deaths'\r\n          description={selectedState && selectedState.deaths}\r\n          color='red'\r\n          meta=''\r\n        />\r\n      </Card.Group>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default StateStats;\r\n"]},"metadata":{},"sourceType":"module"}