{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"C:\\\\Learning\\\\coronavirus-tracker\\\\components\\\\Stats.js\";\nvar __jsx = React.createElement;\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  background: #f2f2f2;\\n  font-size: 2rem;\\n  padding: 2rem;\\n  border-radius: 2rem;\\n  display: grid;\\n  align-items: center;\\n  justify-items: center;\\n  text-align: center;\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  display: grid;\\n  grid-template-columns: repeat(3, 1fr);\\n  grid-gap: 1rem;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from \"react\";\nimport useFetch from \"../utils/useFetch\";\nimport styled from \"styled-components\";\nimport { Card } from \"semantic-ui-react\";\nvar StatGrid = styled.div(_templateObject());\nvar StatBlock = styled.div(_templateObject2());\nvar Stats = React.memo(function (_ref) {\n  var url = _ref.url;\n\n  var _useFetch = useFetch(url),\n      stats = _useFetch.stats,\n      loading = _useFetch.loading,\n      error = _useFetch.error;\n\n  console.log(\"Stats component loading\", stats, loading, error);\n  if (loading) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, \"Loading...\");\n  if (error) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, error.toString());\n  if (stats.error) return __jsx(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, \"No data found. API error => \", stats.error.message);\n  var items = [{\n    header: \"Coronavirus Cases\",\n    description: \"\".concat(stats.confirmed.value),\n    color: \"red\",\n    meta: \"\"\n  }, {\n    header: \"Deaths:\",\n    color: \"darkest red\",\n    description: \"\".concat(stats.deaths.value),\n    meta: \"\"\n  }, {\n    header: \"Recovered\",\n    color: \"green\",\n    description: \"\".concat(stats.recovered.value),\n    meta: \"\"\n  }];\n  return __jsx(React.Fragment, null, __jsx(Card.Group, {\n    itemsPerRow: 3,\n    items: items,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }));\n});\nexport default Stats;","map":{"version":3,"sources":["C:/Learning/coronavirus-tracker/components/Stats.js"],"names":["React","useFetch","styled","Card","StatGrid","div","StatBlock","Stats","memo","url","stats","loading","error","console","log","toString","message","items","header","description","confirmed","value","color","meta","deaths","recovered"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,mBAArB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,IAAT,QAAqB,mBAArB;AAEA,IAAMC,QAAQ,GAAGF,MAAM,CAACG,GAAV,mBAAd;AAKA,IAAMC,SAAS,GAAGJ,MAAM,CAACG,GAAV,oBAAf;AAWA,IAAME,KAAK,GAAGP,KAAK,CAACQ,IAAN,CAAW,gBAAa;AAAA,MAAVC,GAAU,QAAVA,GAAU;;AAAA,kBACFR,QAAQ,CAACQ,GAAD,CADN;AAAA,MAC5BC,KAD4B,aAC5BA,KAD4B;AAAA,MACrBC,OADqB,aACrBA,OADqB;AAAA,MACZC,KADY,aACZA,KADY;;AAEpCC,EAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCJ,KAAvC,EAA8CC,OAA9C,EAAuDC,KAAvD;AAEA,MAAID,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AAEb,MAAIC,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIA,KAAK,CAACG,QAAN,EAAJ,CAAP;AAEX,MAAIL,KAAK,CAACE,KAAV,EACE,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAAiCF,KAAK,CAACE,KAAN,CAAYI,OAA7C,CAAP;AAEF,MAAMC,KAAK,GAAG,CACZ;AACEC,IAAAA,MAAM,EAAE,mBADV;AAEEC,IAAAA,WAAW,YAAKT,KAAK,CAACU,SAAN,CAAgBC,KAArB,CAFb;AAGEC,IAAAA,KAAK,EAAE,KAHT;AAIEC,IAAAA,IAAI,EAAE;AAJR,GADY,EAOZ;AACEL,IAAAA,MAAM,EAAE,SADV;AAEEI,IAAAA,KAAK,EAAE,aAFT;AAGEH,IAAAA,WAAW,YAAKT,KAAK,CAACc,MAAN,CAAaH,KAAlB,CAHb;AAIEE,IAAAA,IAAI,EAAE;AAJR,GAPY,EAaZ;AACEL,IAAAA,MAAM,EAAE,WADV;AAEEI,IAAAA,KAAK,EAAE,OAFT;AAGEH,IAAAA,WAAW,YAAKT,KAAK,CAACe,SAAN,CAAgBJ,KAArB,CAHb;AAIEE,IAAAA,IAAI,EAAE;AAJR,GAbY,CAAd;AAqBA,SACE,4BACE,MAAC,IAAD,CAAM,KAAN;AAAY,IAAA,WAAW,EAAE,CAAzB;AAA4B,IAAA,KAAK,EAAEN,KAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAmBD,CAnDa,CAAd;AAqDA,eAAeV,KAAf","sourcesContent":["import React from \"react\";\r\nimport useFetch from \"../utils/useFetch\";\r\nimport styled from \"styled-components\";\r\nimport { Card } from \"semantic-ui-react\";\r\n\r\nconst StatGrid = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(3, 1fr);\r\n  grid-gap: 1rem;\r\n`;\r\nconst StatBlock = styled.div`\r\n  background: #f2f2f2;\r\n  font-size: 2rem;\r\n  padding: 2rem;\r\n  border-radius: 2rem;\r\n  display: grid;\r\n  align-items: center;\r\n  justify-items: center;\r\n  text-align: center;\r\n`;\r\n\r\nconst Stats = React.memo(({ url }) => {\r\n  const { stats, loading, error } = useFetch(url);\r\n  console.log(\"Stats component loading\", stats, loading, error);\r\n\r\n  if (loading) return <p>Loading...</p>;\r\n\r\n  if (error) return <p>{error.toString()}</p>;\r\n\r\n  if (stats.error)\r\n    return <h3>No data found. API error => {stats.error.message}</h3>;\r\n\r\n  const items = [\r\n    {\r\n      header: \"Coronavirus Cases\",\r\n      description: `${stats.confirmed.value}`,\r\n      color: \"red\",\r\n      meta: \"\"\r\n    },\r\n    {\r\n      header: \"Deaths:\",\r\n      color: \"darkest red\",\r\n      description: `${stats.deaths.value}`,\r\n      meta: \"\"\r\n    },\r\n    {\r\n      header: \"Recovered\",\r\n      color: \"green\",\r\n      description: `${stats.recovered.value}`,\r\n      meta: \"\"\r\n    }\r\n  ];\r\n\r\n  return (\r\n    <>\r\n      <Card.Group itemsPerRow={3} items={items} />\r\n      {/* <StatGrid>\r\n        <StatBlock>\r\n          <h3>Confirmed:</h3>\r\n          <span>{stats.confirmed.value}</span>\r\n        </StatBlock>\r\n        <StatBlock>\r\n          <h3>Deaths:</h3>\r\n          <span>{stats.deaths.value}</span>\r\n        </StatBlock>\r\n        <StatBlock>\r\n          <h3>Recovered:</h3>\r\n          <span>{stats.recovered.value}</span>\r\n        </StatBlock>\r\n      </StatGrid> */}\r\n    </>\r\n  );\r\n});\r\n\r\nexport default Stats;\r\n"]},"metadata":{},"sourceType":"module"}