{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar getBarChartData = function getBarChartData(apiData) {};\n\nvar getBarChartOptions = function getBarChartOptions() {};\n\nvar getChartData = function getChartData(chartType, apiData) {\n  var _ref;\n\n  //console.log(\"Api data\", apiData.slice(-10));\n  var sliced = apiData.slice(-40);\n  return {\n    labels: sliced.map(function (it) {\n      return it.reportDateString;\n    }),\n    datasets: [(_ref = {\n      label: \"Total\",\n      fill: false,\n      lineTension: 0,\n      borderWidth: 2,\n      pointBackgroundColor: \"red\",\n      pointBorderColor: \"red\",\n      pointHoverRadius: 5,\n      pointRadius: 2,\n      backgroundColor: \"red\",\n      pointHoverBackgroundColor: \"red\",\n      pointHoverBorderColor: \"rgba(220,220,220,1)\",\n      pointBorderWidth: 1\n    }, _defineProperty(_ref, \"pointHoverRadius\", 5), _defineProperty(_ref, \"borderColor\", \"red\"), _defineProperty(_ref, \"data\", sliced.map(function (it) {\n      return it.totalConfirmed;\n    })), _ref), {\n      label: \"China\",\n      fill: false,\n      lineTension: 0,\n      borderWidth: 2,\n      backgroundColor: \"orange\",\n      borderColor: \"orange\",\n      borderCapStyle: \"butt\",\n      borderDash: [],\n      borderDashOffset: 0.0,\n      borderJoinStyle: \"miter\",\n      pointBorderColor: \"orange\",\n      pointBackgroundColor: \"orange\",\n      pointBorderWidth: 1,\n      pointHoverRadius: 5,\n      pointHoverBackgroundColor: \"orange\",\n      pointHoverBorderColor: \"rgba(220,220,220,1)\",\n      pointHoverBorderWidth: 2,\n      pointRadius: 2,\n      pointHitRadius: 10,\n      data: sliced.map(function (it) {\n        return it.mainlandChina;\n      })\n    }, {\n      label: \"Other Countries\",\n      fill: false,\n      lineTension: 0,\n      borderWidth: 2,\n      backgroundColor: \"blue\",\n      borderColor: \"blue\",\n      borderCapStyle: \"butt\",\n      borderDash: [],\n      borderDashOffset: 0.0,\n      borderJoinStyle: \"miter\",\n      pointBorderColor: \"blue\",\n      pointBackgroundColor: \"blue\",\n      pointBorderWidth: 1,\n      pointHoverRadius: 5,\n      pointHoverBackgroundColor: \"blue\",\n      pointHoverBorderColor: \"rgba(220,220,220,1)\",\n      pointHoverBorderWidth: 2,\n      pointRadius: 2,\n      pointHitRadius: 10,\n      data: sliced.map(function (it) {\n        return it.otherLocations;\n      })\n    }, {\n      label: \"Recovered\",\n      fill: false,\n      lineTension: 0,\n      borderWidth: 2,\n      backgroundColor: \"green\",\n      borderColor: \"green\",\n      borderCapStyle: \"butt\",\n      borderDash: [],\n      borderDashOffset: 0.0,\n      borderJoinStyle: \"miter\",\n      pointBorderColor: \"green\",\n      pointBackgroundColor: \"green\",\n      pointBorderWidth: 1,\n      pointHoverRadius: 5,\n      pointHoverBackgroundColor: \"green\",\n      pointHoverBorderColor: \"rgba(220,220,220,1)\",\n      pointHoverBorderWidth: 2,\n      pointRadius: 2,\n      pointHitRadius: 10,\n      data: sliced.map(function (it) {\n        return it.totalRecovered;\n      })\n    }]\n  };\n};\n\nvar getChartOptions = function getChartOptions(type) {\n  return {\n    responsive: true,\n    maintainAspectRatio: false,\n    legend: {\n      position: \"top\",\n      labels: {\n        usePointStyle: true,\n        boxWidth: 8\n      }\n    },\n    tooltips: {\n      mode: \"index\",\n      callbacks: {\n        label: function label(tooltipItem, data) {\n          var label = data.datasets[tooltipItem.datasetIndex].label || \"\";\n\n          if (label) {\n            label += \": \";\n          }\n\n          label += tooltipItem.yLabel.toLocaleString();\n          return label;\n        }\n      }\n    },\n    scales: {\n      xAxes: xAxes,\n      yAxes: yAxes\n    },\n    title: {\n      display: \"Display\",\n      fontSize: 20,\n      text: \"Coronavirs Cases - Overall Stats\"\n    }\n  };\n};\n\nvar xAxes = [{\n  type: \"time\",\n  distribution: \"series\",\n  gridLines: {\n    display: false\n  },\n  scaleLabel: {\n    display: true,\n    labelString: \"Date (Last 40 days)\",\n    fontSize: 15\n  },\n  ticks: {\n    major: {\n      enabled: true,\n      fontStyle: \"bold\"\n    },\n    source: \"data\",\n    autoSkip: true,\n    autoSkipPadding: 0,\n    maxRotation: 50\n  },\n  time: {\n    tooltipFormat: \"MM/DD/YYYY\",\n    displayFormats: {\n      month: \"MMM DD\"\n    }\n  }\n}];\nvar yAxes = [{\n  scaleLabel: {\n    display: true,\n    labelString: \"Number of cases (in thousands)\",\n    fontSize: 15\n  },\n  ticks: {\n    beginAtZero: true,\n    userCallback: function userCallback(value, index, values) {\n      return value.toLocaleString(); // this is all we need\n    }\n  }\n}];\nexport { getChartData, getChartOptions };","map":{"version":3,"sources":["C:/Learning/coronavirus-tracker/utils/chartUtils.js"],"names":["getBarChartData","apiData","getBarChartOptions","getChartData","chartType","sliced","slice","labels","map","it","reportDateString","datasets","label","fill","lineTension","borderWidth","pointBackgroundColor","pointBorderColor","pointHoverRadius","pointRadius","backgroundColor","pointHoverBackgroundColor","pointHoverBorderColor","pointBorderWidth","totalConfirmed","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointHoverBorderWidth","pointHitRadius","data","mainlandChina","otherLocations","totalRecovered","getChartOptions","type","responsive","maintainAspectRatio","legend","position","usePointStyle","boxWidth","tooltips","mode","callbacks","tooltipItem","datasetIndex","yLabel","toLocaleString","scales","xAxes","yAxes","title","display","fontSize","text","distribution","gridLines","scaleLabel","labelString","ticks","major","enabled","fontStyle","source","autoSkip","autoSkipPadding","maxRotation","time","tooltipFormat","displayFormats","month","beginAtZero","userCallback","value","index","values"],"mappings":"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","sourcesContent":["const getBarChartData = apiData => {};\r\n\r\nconst getBarChartOptions = () => {};\r\n\r\nconst getChartData = (chartType, apiData) => {\r\n  //console.log(\"Api data\", apiData.slice(-10));\r\n  let sliced = apiData.slice(-40);\r\n\r\n  return {\r\n    labels: sliced.map(it => it.reportDateString),\r\n    datasets: [\r\n      {\r\n        label: \"Total\",\r\n        fill: false,\r\n        lineTension: 0,\r\n        borderWidth: 2,\r\n        pointBackgroundColor: \"red\",\r\n        pointBorderColor: \"red\",\r\n        pointHoverRadius: 5,\r\n        pointRadius: 2,\r\n        backgroundColor: \"red\",\r\n        pointHoverBackgroundColor: \"red\",\r\n        pointHoverBorderColor: \"rgba(220,220,220,1)\",\r\n        pointBorderWidth: 1,\r\n        pointHoverRadius: 5,\r\n        borderColor: \"red\",\r\n        data: sliced.map(it => it.totalConfirmed)\r\n      },\r\n      {\r\n        label: \"China\",\r\n        fill: false,\r\n        lineTension: 0,\r\n        borderWidth: 2,\r\n        backgroundColor: \"orange\",\r\n        borderColor: \"orange\",\r\n        borderCapStyle: \"butt\",\r\n        borderDash: [],\r\n        borderDashOffset: 0.0,\r\n        borderJoinStyle: \"miter\",\r\n        pointBorderColor: \"orange\",\r\n        pointBackgroundColor: \"orange\",\r\n        pointBorderWidth: 1,\r\n        pointHoverRadius: 5,\r\n        pointHoverBackgroundColor: \"orange\",\r\n        pointHoverBorderColor: \"rgba(220,220,220,1)\",\r\n        pointHoverBorderWidth: 2,\r\n        pointRadius: 2,\r\n        pointHitRadius: 10,\r\n        data: sliced.map(it => it.mainlandChina)\r\n      },\r\n      {\r\n        label: \"Other Countries\",\r\n        fill: false,\r\n        lineTension: 0,\r\n        borderWidth: 2,\r\n        backgroundColor: \"blue\",\r\n        borderColor: \"blue\",\r\n        borderCapStyle: \"butt\",\r\n        borderDash: [],\r\n        borderDashOffset: 0.0,\r\n        borderJoinStyle: \"miter\",\r\n        pointBorderColor: \"blue\",\r\n        pointBackgroundColor: \"blue\",\r\n        pointBorderWidth: 1,\r\n        pointHoverRadius: 5,\r\n        pointHoverBackgroundColor: \"blue\",\r\n        pointHoverBorderColor: \"rgba(220,220,220,1)\",\r\n        pointHoverBorderWidth: 2,\r\n        pointRadius: 2,\r\n        pointHitRadius: 10,\r\n        data: sliced.map(it => it.otherLocations)\r\n      },\r\n      {\r\n        label: \"Recovered\",\r\n        fill: false,\r\n        lineTension: 0,\r\n        borderWidth: 2,\r\n        backgroundColor: \"green\",\r\n        borderColor: \"green\",\r\n        borderCapStyle: \"butt\",\r\n        borderDash: [],\r\n        borderDashOffset: 0.0,\r\n        borderJoinStyle: \"miter\",\r\n        pointBorderColor: \"green\",\r\n        pointBackgroundColor: \"green\",\r\n        pointBorderWidth: 1,\r\n        pointHoverRadius: 5,\r\n        pointHoverBackgroundColor: \"green\",\r\n        pointHoverBorderColor: \"rgba(220,220,220,1)\",\r\n        pointHoverBorderWidth: 2,\r\n        pointRadius: 2,\r\n        pointHitRadius: 10,\r\n        data: sliced.map(it => it.totalRecovered)\r\n      }\r\n    ]\r\n  };\r\n};\r\n\r\nconst getChartOptions = type => {\r\n  return {\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    legend: {\r\n      position: \"top\",\r\n      labels: {\r\n        usePointStyle: true,\r\n        boxWidth: 8\r\n      }\r\n    },\r\n    tooltips: {\r\n      mode: \"index\",\r\n      callbacks: {\r\n        label: function(tooltipItem, data) {\r\n          var label = data.datasets[tooltipItem.datasetIndex].label || \"\";\r\n          if (label) {\r\n            label += \": \";\r\n          }\r\n          label += tooltipItem.yLabel.toLocaleString();\r\n          return label;\r\n        }\r\n      }\r\n    },\r\n    scales: {\r\n      xAxes,\r\n      yAxes\r\n    },\r\n    title: {\r\n      display: \"Display\",\r\n      fontSize: 20,\r\n      text: \"Coronavirs Cases - Overall Stats\"\r\n    }\r\n  };\r\n};\r\n\r\nconst xAxes = [\r\n  {\r\n    type: \"time\",\r\n    distribution: \"series\",\r\n    gridLines: {\r\n      display: false\r\n    },\r\n    scaleLabel: {\r\n      display: true,\r\n      labelString: \"Date (Last 40 days)\",\r\n      fontSize: 15\r\n    },\r\n    ticks: {\r\n      major: {\r\n        enabled: true,\r\n        fontStyle: \"bold\"\r\n      },\r\n      source: \"data\",\r\n      autoSkip: true,\r\n      autoSkipPadding: 0,\r\n      maxRotation: 50\r\n    },\r\n    time: {\r\n      tooltipFormat: \"MM/DD/YYYY\",\r\n      displayFormats: {\r\n        month: \"MMM DD\"\r\n      }\r\n    }\r\n  }\r\n];\r\n\r\nconst yAxes = [\r\n  {\r\n    scaleLabel: {\r\n      display: true,\r\n      labelString: \"Number of cases (in thousands)\",\r\n      fontSize: 15\r\n    },\r\n    ticks: {\r\n      beginAtZero: true,\r\n      userCallback: function(value, index, values) {\r\n        return value.toLocaleString(); // this is all we need\r\n      }\r\n    }\r\n  }\r\n];\r\nexport { getChartData, getChartOptions };\r\n"]},"metadata":{},"sourceType":"module"}