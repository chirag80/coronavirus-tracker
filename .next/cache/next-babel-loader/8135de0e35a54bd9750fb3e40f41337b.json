{"ast":null,"code":"var _jsxFileName = \"C:\\\\Learning\\\\coronavirus-tracker\\\\components\\\\StateStats.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from \"react\";\nimport useFetch from \"../utils/useFetch\";\nimport { Card, Dropdown } from \"semantic-ui-react\";\nimport { numberWithCommas } from \"../utils/format\";\n\nconst StateStats = ({\n  country\n}) => {\n  if (country === \"world\") {\n    return __jsx(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 8\n      },\n      __self: this\n    }, \"Select country above to see state wise data\");\n  }\n\n  const {\n    0: selectedState,\n    1: setSelectedState\n  } = useState(undefined);\n  useEffect(() => {\n    setSelectedState(undefined);\n  }, [country]);\n  const {\n    stats: states,\n    loading,\n    error\n  } = useFetch(`https://covid19.mathdro.id/api/countries/${country}/confirmed`);\n  if (loading) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, \"Loading States of selected country...\");\n  if (error) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, \"Retrieving states API Error => \", error.toString());\n  if (states.error) return __jsx(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, \"No data found. Retrieving states API error => \", stats.error.message);\n  console.log(\"State wise info\", states);\n  let stateOptions = states.map(({\n    provinceState,\n    countryRegion\n  }, index) => ({\n    key: provinceState || countryRegion,\n    value: provinceState || countryRegion,\n    text: provinceState || countryRegion\n  }));\n\n  const onChange = selectedValue => {\n    let selected = states.find(state => state.provinceState === selectedValue);\n    console.log(\"Selected state info\", selected);\n\n    if (!selected) {\n      selected = states[0];\n    }\n\n    setSelectedState(selected);\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Dropdown, {\n    placeholder: \"Select State\",\n    fluid: true,\n    search: true,\n    selection: true,\n    selectOnBlur: false,\n    options: stateOptions,\n    onChange: (e, data) => {\n      onChange(data.value);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }), __jsx(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }), selectedState && __jsx(Card.Group, {\n    itemsPerRow: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, __jsx(Card.Content, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, __jsx(Card.Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, \"Total\"), __jsx(Card.Meta, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }), __jsx(Card.Description, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, selectedState && numberWithCommas(selectedState.confirmed)), __jsx(Card.color, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, \"grey\")), __jsx(Card, {\n    header: \"Active\",\n    description: selectedState && numberWithCommas(selectedState.active),\n    color: \"blue\",\n    meta: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }), __jsx(Card, {\n    header: \"Recovered\",\n    description: selectedState && numberWithCommas(selectedState.recovered),\n    color: \"green\",\n    meta: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }), __jsx(Card, {\n    header: \"Deaths\",\n    description: selectedState && numberWithCommas(selectedState.deaths),\n    color: \"red\",\n    meta: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  })));\n};\n\nexport default StateStats;","map":{"version":3,"sources":["C:/Learning/coronavirus-tracker/components/StateStats.js"],"names":["React","useState","useEffect","useFetch","Card","Dropdown","numberWithCommas","StateStats","country","selectedState","setSelectedState","undefined","stats","states","loading","error","toString","message","console","log","stateOptions","map","provinceState","countryRegion","index","key","value","text","onChange","selectedValue","selected","find","state","e","data","confirmed","active","recovered","deaths"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport useFetch from \"../utils/useFetch\";\r\nimport { Card, Dropdown } from \"semantic-ui-react\";\r\nimport { numberWithCommas } from \"../utils/format\";\r\n\r\nconst StateStats = ({ country }) => {\r\n  if (country === \"world\") {\r\n    return <h3>Select country above to see state wise data</h3>;\r\n  }\r\n\r\n  const [selectedState, setSelectedState] = useState(undefined);\r\n\r\n  useEffect(() => {\r\n    setSelectedState(undefined);\r\n  }, [country]);\r\n\r\n  const { stats: states, loading, error } = useFetch(\r\n    `https://covid19.mathdro.id/api/countries/${country}/confirmed`\r\n  );\r\n\r\n  if (loading) return <p>Loading States of selected country...</p>;\r\n\r\n  if (error) return <p>Retrieving states API Error => {error.toString()}</p>;\r\n\r\n  if (states.error)\r\n    return (\r\n      <h3>\r\n        No data found. Retrieving states API error => {stats.error.message}\r\n      </h3>\r\n    );\r\n\r\n  console.log(\"State wise info\", states);\r\n\r\n  let stateOptions = states.map(({ provinceState, countryRegion }, index) => ({\r\n    key: provinceState || countryRegion,\r\n    value: provinceState || countryRegion,\r\n    text: provinceState || countryRegion\r\n  }));\r\n\r\n  const onChange = selectedValue => {\r\n    let selected = states.find(state => state.provinceState === selectedValue);\r\n    console.log(\"Selected state info\", selected);\r\n    if (!selected) {\r\n      selected = states[0];\r\n    }\r\n    setSelectedState(selected);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Dropdown\r\n        placeholder='Select State'\r\n        fluid\r\n        search\r\n        selection\r\n        selectOnBlur={false}\r\n        options={stateOptions}\r\n        onChange={(e, data) => {\r\n          onChange(data.value);\r\n        }}\r\n      />\r\n      <br />\r\n      {selectedState && (\r\n        <Card.Group itemsPerRow={4}>\r\n          <Card.Content>\r\n            <Card.Header>Total</Card.Header>\r\n            <Card.Meta></Card.Meta>\r\n            <Card.Description>\r\n              {selectedState && numberWithCommas(selectedState.confirmed)}\r\n            </Card.Description>\r\n            <Card.color>grey</Card.color>\r\n          </Card.Content>\r\n          {/* <Card\r\n            header='Total'\r\n            description={\r\n              selectedState && numberWithCommas(selectedState.confirmed)\r\n            }\r\n            color='grey'\r\n            meta=''\r\n          /> */}\r\n          <Card\r\n            header='Active'\r\n            description={\r\n              selectedState && numberWithCommas(selectedState.active)\r\n            }\r\n            color='blue'\r\n            meta=''\r\n          />\r\n          <Card\r\n            header='Recovered'\r\n            description={\r\n              selectedState && numberWithCommas(selectedState.recovered)\r\n            }\r\n            color='green'\r\n            meta=''\r\n          />\r\n          <Card\r\n            header='Deaths'\r\n            description={\r\n              selectedState && numberWithCommas(selectedState.deaths)\r\n            }\r\n            color='red'\r\n            meta=''\r\n          />\r\n        </Card.Group>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default StateStats;\r\n"]},"metadata":{},"sourceType":"module"}