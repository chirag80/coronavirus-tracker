{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Learning\\\\coronavirus-tracker\\\\components\\\\CountrySelector.js\";\nvar __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport useFetch from \"../utils/useFetch\";\n\nvar CountrySelector = function CountrySelector(_ref) {\n  var _onChange = _ref.onChange;\n\n  var _useFetch = useFetch(\"https://covid19.mathdro.id/api/countries\"),\n      countries = _useFetch.stats,\n      error = _useFetch.error,\n      loading = _useFetch.loading;\n\n  var _useState = useState(\"USA\"),\n      selected = _useState[0],\n      setSelected = _useState[1];\n\n  if (loading) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10\n    },\n    __self: this\n  }, \"Countries Loading...\");\n  if (error) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  }, \"Error loading countries..\");\n  return __jsx(React.Fragment, null, __jsx(\"select\", {\n    onChange: function onChange(e) {\n      _onChange(e.target.value);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, __jsx(\"option\", {\n    key: \"world\",\n    value: \"world\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, \"World\"), Object.entries(countries.countries).map(function (_ref2) {\n    var _ref3 = _slicedToArray(_ref2, 2),\n        name = _ref3[0],\n        code = _ref3[1];\n\n    return __jsx(\"option\", {\n      key: name,\n      value: countries.iso3[code],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }, name);\n  })));\n};\n\nexport default CountrySelector;","map":{"version":3,"sources":["C:/Learning/coronavirus-tracker/components/CountrySelector.js"],"names":["React","useState","useFetch","CountrySelector","onChange","countries","stats","error","loading","selected","setSelected","e","target","value","Object","entries","map","name","code","iso3"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,QAAP,MAAqB,mBAArB;;AAEA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,OAAkB;AAAA,MAAfC,SAAe,QAAfA,QAAe;;AAAA,kBACKF,QAAQ,CACnD,0CADmD,CADb;AAAA,MACzBG,SADyB,aAChCC,KADgC;AAAA,MACdC,KADc,aACdA,KADc;AAAA,MACPC,OADO,aACPA,OADO;;AAAA,kBAIRP,QAAQ,CAAC,KAAD,CAJA;AAAA,MAIjCQ,QAJiC;AAAA,MAIvBC,WAJuB;;AAMxC,MAAIF,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAP;AAEb,MAAID,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAAP;AAEX,SACE,4BACE;AACE,IAAA,QAAQ,EAAE,kBAAAI,CAAC,EAAI;AACbP,MAAAA,SAAQ,CAACO,CAAC,CAACC,MAAF,CAASC,KAAV,CAAR;AACD,KAHH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKE;AAAQ,IAAA,GAAG,EAAC,OAAZ;AAAoB,IAAA,KAAK,EAAC,OAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aALF,EAQGC,MAAM,CAACC,OAAP,CAAeV,SAAS,CAACA,SAAzB,EAAoCW,GAApC,CAAwC;AAAA;AAAA,QAAEC,IAAF;AAAA,QAAQC,IAAR;;AAAA,WACvC;AAAQ,MAAA,GAAG,EAAED,IAAb;AAAmB,MAAA,KAAK,EAAEZ,SAAS,CAACc,IAAV,CAAeD,IAAf,CAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGD,IADH,CADuC;AAAA,GAAxC,CARH,CADF,CADF;AAkBD,CA5BD;;AA8BA,eAAed,eAAf","sourcesContent":["import React, { useState } from \"react\";\r\nimport useFetch from \"../utils/useFetch\";\r\n\r\nconst CountrySelector = ({ onChange }) => {\r\n  const { stats: countries, error, loading } = useFetch(\r\n    \"https://covid19.mathdro.id/api/countries\"\r\n  );\r\n  const [selected, setSelected] = useState(\"USA\");\r\n\r\n  if (loading) return <p>Countries Loading...</p>;\r\n\r\n  if (error) return <p>Error loading countries..</p>;\r\n\r\n  return (\r\n    <>\r\n      <select\r\n        onChange={e => {\r\n          onChange(e.target.value);\r\n        }}\r\n      >\r\n        <option key='world' value='world'>\r\n          World\r\n        </option>\r\n        {Object.entries(countries.countries).map(([name, code]) => (\r\n          <option key={name} value={countries.iso3[code]}>\r\n            {name}\r\n          </option>\r\n        ))}\r\n      </select>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CountrySelector;\r\n"]},"metadata":{},"sourceType":"module"}