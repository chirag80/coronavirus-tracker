{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar _jsxFileName = \"C:\\\\Learning\\\\coronavirus-tracker\\\\components\\\\BarChart.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from \"react\";\nimport { Bar } from \"react-chartjs-2\";\n\nvar BarChart = function BarChart(_ref) {\n  var selectedState = _ref.selectedState;\n  console.log(\"Bar Chart\", selectedState);\n  if (!selectedState) return __jsx(React.Fragment, null);\n\n  var _useState = useState({}),\n      locations = _useState[0],\n      setLocations = _useState[1];\n\n  var getData = function getData() {\n    var response, data;\n    return _regeneratorRuntime.async(function getData$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(fetch(\"https://coronavirus-tracker-api.herokuapp.com/confirmed\"));\n\n          case 2:\n            response = _context.sent;\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 5:\n            data = _context.sent;\n            console.log(\"useEffect bar chart\", data.locations);\n            setLocations(data.locations);\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  useEffect(function () {\n    getData();\n  }, []);\n  var chartData = {}; //getChartDate(\"line\", stats);\n\n  var chartOptions = {}; //getChartOptions(\"line\");\n\n  useEffect(function () {\n    chartData = getBarChartData(\"bar\", stats);\n    chartOptions = getBarChartOptions(\"bar\");\n  }, [selectedState]);\n  return __jsx(React.Fragment, null, __jsx(Bar, {\n    data: chartData,\n    options: chartOptions,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }));\n};\n\nexport default BarChart;","map":{"version":3,"sources":["C:/Learning/coronavirus-tracker/components/BarChart.js"],"names":["React","useState","useEffect","Bar","BarChart","selectedState","console","log","locations","setLocations","getData","fetch","response","json","data","chartData","chartOptions","getBarChartData","stats","getBarChartOptions"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,GAAT,QAAoB,iBAApB;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,OAAuB;AAAA,MAApBC,aAAoB,QAApBA,aAAoB;AACtCC,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBF,aAAzB;AAEA,MAAI,CAACA,aAAL,EAAoB,OAAO,2BAAP;;AAHkB,kBAKJJ,QAAQ,CAAC,EAAD,CALJ;AAAA,MAK/BO,SAL+B;AAAA,MAKpBC,YALoB;;AAOtC,MAAMC,OAAO,GAAG,SAAVA,OAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACOC,KAAK,CACxB,yDADwB,CADZ;;AAAA;AACVC,YAAAA,QADU;AAAA;AAAA,6CAIGA,QAAQ,CAACC,IAAT,EAJH;;AAAA;AAIVC,YAAAA,IAJU;AAKdR,YAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCO,IAAI,CAACN,SAAxC;AACAC,YAAAA,YAAY,CAACK,IAAI,CAACN,SAAN,CAAZ;;AANc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAhB;;AASAN,EAAAA,SAAS,CAAC,YAAM;AACdQ,IAAAA,OAAO;AACR,GAFQ,EAEN,EAFM,CAAT;AAIA,MAAIK,SAAS,GAAG,EAAhB,CApBsC,CAoBlB;;AACpB,MAAIC,YAAY,GAAG,EAAnB,CArBsC,CAqBf;;AAEvBd,EAAAA,SAAS,CAAC,YAAM;AACda,IAAAA,SAAS,GAAGE,eAAe,CAAC,KAAD,EAAQC,KAAR,CAA3B;AACAF,IAAAA,YAAY,GAAGG,kBAAkB,CAAC,KAAD,CAAjC;AACD,GAHQ,EAGN,CAACd,aAAD,CAHM,CAAT;AAKA,SACE,4BACE,MAAC,GAAD;AAAK,IAAA,IAAI,EAAEU,SAAX;AAAsB,IAAA,OAAO,EAAEC,YAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKD,CAjCD;;AAmCA,eAAeZ,QAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Bar } from \"react-chartjs-2\";\r\n\r\nconst BarChart = ({ selectedState }) => {\r\n  console.log(\"Bar Chart\", selectedState);\r\n\r\n  if (!selectedState) return <></>;\r\n\r\n  const [locations, setLocations] = useState({});\r\n\r\n  const getData = async () => {\r\n    let response = await fetch(\r\n      \"https://coronavirus-tracker-api.herokuapp.com/confirmed\"\r\n    );\r\n    let data = await response.json();\r\n    console.log(\"useEffect bar chart\", data.locations);\r\n    setLocations(data.locations);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, []);\r\n\r\n  let chartData = {}; //getChartDate(\"line\", stats);\r\n  let chartOptions = {}; //getChartOptions(\"line\");\r\n\r\n  useEffect(() => {\r\n    chartData = getBarChartData(\"bar\", stats);\r\n    chartOptions = getBarChartOptions(\"bar\");\r\n  }, [selectedState]);\r\n\r\n  return (\r\n    <>\r\n      <Bar data={chartData} options={chartOptions} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default BarChart;\r\n"]},"metadata":{},"sourceType":"module"}