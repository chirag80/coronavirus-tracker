{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar getBarChartData = function getBarChartData(apiData, selectedState) {\n  console.log(\"Locations in chart utils\", apiData, selectedState);\n  var list = apiData.filter(function (x) {\n    return x.country_code === selectedState.iso2;\n  });\n  var record = list.length > 1 ? list.find(function (x) {\n    return x.province === selectedState.provinceState;\n  }) : list[0];\n  console.log(\"record\", record);\n  var sorted = Object.keys(record.history).sort(function (a, b) {\n    return new Date(b) - new Date(a);\n  });\n  console.log(\"sorted\", sorted.slice(0, 10));\n  return {\n    labels: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\"],\n    datasets: [{\n      label: \"My First dataset\",\n      backgroundColor: \"rgba(255,99,132,0.2)\",\n      borderColor: \"rgba(255,99,132,1)\",\n      borderWidth: 1,\n      hoverBackgroundColor: \"rgba(255,99,132,0.4)\",\n      hoverBorderColor: \"rgba(255,99,132,1)\",\n      data: [65, 59, 80, 81, 56, 55, 40]\n    }]\n  };\n};\n\nvar getBarChartOptions = function getBarChartOptions() {\n  return {\n    maintainAspectRatio: true\n  };\n};\n\nvar getChartData = function getChartData(chartType, apiData) {\n  var _ref;\n\n  //console.log(\"Api data\", apiData.slice(-10));\n  var sliced = apiData.slice(-40);\n  return {\n    labels: sliced.map(function (it) {\n      return it.reportDateString;\n    }),\n    datasets: [(_ref = {\n      label: \"Total\",\n      fill: false,\n      lineTension: 0,\n      borderWidth: 2,\n      pointBackgroundColor: \"red\",\n      pointBorderColor: \"red\",\n      pointHoverRadius: 5,\n      pointRadius: 2,\n      backgroundColor: \"red\",\n      pointHoverBackgroundColor: \"red\",\n      pointHoverBorderColor: \"rgba(220,220,220,1)\",\n      pointBorderWidth: 1\n    }, _defineProperty(_ref, \"pointHoverRadius\", 5), _defineProperty(_ref, \"borderColor\", \"red\"), _defineProperty(_ref, \"data\", sliced.map(function (it) {\n      return it.totalConfirmed;\n    })), _ref), {\n      label: \"China\",\n      fill: false,\n      lineTension: 0,\n      borderWidth: 2,\n      backgroundColor: \"orange\",\n      borderColor: \"orange\",\n      borderCapStyle: \"butt\",\n      borderDash: [],\n      borderDashOffset: 0.0,\n      borderJoinStyle: \"miter\",\n      pointBorderColor: \"orange\",\n      pointBackgroundColor: \"orange\",\n      pointBorderWidth: 1,\n      pointHoverRadius: 5,\n      pointHoverBackgroundColor: \"orange\",\n      pointHoverBorderColor: \"rgba(220,220,220,1)\",\n      pointHoverBorderWidth: 2,\n      pointRadius: 2,\n      pointHitRadius: 10,\n      data: sliced.map(function (it) {\n        return it.mainlandChina;\n      })\n    }, {\n      label: \"Other Countries\",\n      fill: false,\n      lineTension: 0,\n      borderWidth: 2,\n      backgroundColor: \"blue\",\n      borderColor: \"blue\",\n      borderCapStyle: \"butt\",\n      borderDash: [],\n      borderDashOffset: 0.0,\n      borderJoinStyle: \"miter\",\n      pointBorderColor: \"blue\",\n      pointBackgroundColor: \"blue\",\n      pointBorderWidth: 1,\n      pointHoverRadius: 5,\n      pointHoverBackgroundColor: \"blue\",\n      pointHoverBorderColor: \"rgba(220,220,220,1)\",\n      pointHoverBorderWidth: 2,\n      pointRadius: 2,\n      pointHitRadius: 10,\n      data: sliced.map(function (it) {\n        return it.otherLocations;\n      })\n    }, {\n      label: \"Recovered\",\n      fill: false,\n      lineTension: 0,\n      borderWidth: 2,\n      backgroundColor: \"green\",\n      borderColor: \"green\",\n      borderCapStyle: \"butt\",\n      borderDash: [],\n      borderDashOffset: 0.0,\n      borderJoinStyle: \"miter\",\n      pointBorderColor: \"green\",\n      pointBackgroundColor: \"green\",\n      pointBorderWidth: 1,\n      pointHoverRadius: 5,\n      pointHoverBackgroundColor: \"green\",\n      pointHoverBorderColor: \"rgba(220,220,220,1)\",\n      pointHoverBorderWidth: 2,\n      pointRadius: 2,\n      pointHitRadius: 10,\n      data: sliced.map(function (it) {\n        return it.totalRecovered;\n      })\n    }]\n  };\n};\n\nvar getChartOptions = function getChartOptions(type) {\n  return {\n    responsive: true,\n    maintainAspectRatio: false,\n    legend: {\n      position: \"top\",\n      labels: {\n        usePointStyle: true,\n        boxWidth: 8\n      }\n    },\n    tooltips: {\n      mode: \"index\",\n      callbacks: {\n        label: function label(tooltipItem, data) {\n          var label = data.datasets[tooltipItem.datasetIndex].label || \"\";\n\n          if (label) {\n            label += \": \";\n          }\n\n          label += tooltipItem.yLabel.toLocaleString();\n          return label;\n        }\n      }\n    },\n    scales: {\n      xAxes: xAxes,\n      yAxes: yAxes\n    },\n    title: {\n      display: \"Display\",\n      fontSize: 20,\n      text: \"Coronavirs Cases - Overall Stats\"\n    }\n  };\n};\n\nvar xAxes = [{\n  type: \"time\",\n  distribution: \"series\",\n  gridLines: {\n    display: false\n  },\n  scaleLabel: {\n    display: true,\n    labelString: \"Date (Last 40 days)\",\n    fontSize: 15\n  },\n  ticks: {\n    major: {\n      enabled: true,\n      fontStyle: \"bold\"\n    },\n    source: \"data\",\n    autoSkip: true,\n    autoSkipPadding: 0,\n    maxRotation: 50\n  },\n  time: {\n    tooltipFormat: \"MM/DD/YYYY\",\n    displayFormats: {\n      month: \"MMM DD\"\n    }\n  }\n}];\nvar yAxes = [{\n  scaleLabel: {\n    display: true,\n    labelString: \"Number of cases (in thousands)\",\n    fontSize: 15\n  },\n  ticks: {\n    beginAtZero: true,\n    userCallback: function userCallback(value, index, values) {\n      return value.toLocaleString(); // this is all we need\n    }\n  }\n}];\nexport { getChartData, getChartOptions, getBarChartData, getBarChartOptions };","map":{"version":3,"sources":["C:/Learning/coronavirus-tracker/utils/chartUtils.js"],"names":["getBarChartData","apiData","selectedState","console","log","list","filter","x","country_code","iso2","record","length","find","province","provinceState","sorted","Object","keys","history","sort","a","b","Date","slice","labels","datasets","label","backgroundColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","data","getBarChartOptions","maintainAspectRatio","getChartData","chartType","sliced","map","it","reportDateString","fill","lineTension","pointBackgroundColor","pointBorderColor","pointHoverRadius","pointRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointBorderWidth","totalConfirmed","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointHoverBorderWidth","pointHitRadius","mainlandChina","otherLocations","totalRecovered","getChartOptions","type","responsive","legend","position","usePointStyle","boxWidth","tooltips","mode","callbacks","tooltipItem","datasetIndex","yLabel","toLocaleString","scales","xAxes","yAxes","title","display","fontSize","text","distribution","gridLines","scaleLabel","labelString","ticks","major","enabled","fontStyle","source","autoSkip","autoSkipPadding","maxRotation","time","tooltipFormat","displayFormats","month","beginAtZero","userCallback","value","index","values"],"mappings":"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","sourcesContent":["const getBarChartData = (apiData, selectedState) => {\r\n  console.log(\"Locations in chart utils\", apiData, selectedState);\r\n  const list = apiData.filter(x => x.country_code === selectedState.iso2);\r\n  const record =\r\n    list.length > 1\r\n      ? list.find(x => x.province === selectedState.provinceState)\r\n      : list[0];\r\n\r\n  console.log(\"record\", record);\r\n\r\n  const sorted = Object.keys(record.history).sort(\r\n    (a, b) => new Date(b) - new Date(a)\r\n  );\r\n\r\n  console.log(\"sorted\", sorted.slice(0, 10));\r\n\r\n  return {\r\n    labels: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\"],\r\n    datasets: [\r\n      {\r\n        label: \"My First dataset\",\r\n        backgroundColor: \"rgba(255,99,132,0.2)\",\r\n        borderColor: \"rgba(255,99,132,1)\",\r\n        borderWidth: 1,\r\n        hoverBackgroundColor: \"rgba(255,99,132,0.4)\",\r\n        hoverBorderColor: \"rgba(255,99,132,1)\",\r\n        data: [65, 59, 80, 81, 56, 55, 40]\r\n      }\r\n    ]\r\n  };\r\n};\r\n\r\nconst getBarChartOptions = () => {\r\n  return {\r\n    maintainAspectRatio: true\r\n  };\r\n};\r\n\r\nconst getChartData = (chartType, apiData) => {\r\n  //console.log(\"Api data\", apiData.slice(-10));\r\n  let sliced = apiData.slice(-40);\r\n\r\n  return {\r\n    labels: sliced.map(it => it.reportDateString),\r\n    datasets: [\r\n      {\r\n        label: \"Total\",\r\n        fill: false,\r\n        lineTension: 0,\r\n        borderWidth: 2,\r\n        pointBackgroundColor: \"red\",\r\n        pointBorderColor: \"red\",\r\n        pointHoverRadius: 5,\r\n        pointRadius: 2,\r\n        backgroundColor: \"red\",\r\n        pointHoverBackgroundColor: \"red\",\r\n        pointHoverBorderColor: \"rgba(220,220,220,1)\",\r\n        pointBorderWidth: 1,\r\n        pointHoverRadius: 5,\r\n        borderColor: \"red\",\r\n        data: sliced.map(it => it.totalConfirmed)\r\n      },\r\n      {\r\n        label: \"China\",\r\n        fill: false,\r\n        lineTension: 0,\r\n        borderWidth: 2,\r\n        backgroundColor: \"orange\",\r\n        borderColor: \"orange\",\r\n        borderCapStyle: \"butt\",\r\n        borderDash: [],\r\n        borderDashOffset: 0.0,\r\n        borderJoinStyle: \"miter\",\r\n        pointBorderColor: \"orange\",\r\n        pointBackgroundColor: \"orange\",\r\n        pointBorderWidth: 1,\r\n        pointHoverRadius: 5,\r\n        pointHoverBackgroundColor: \"orange\",\r\n        pointHoverBorderColor: \"rgba(220,220,220,1)\",\r\n        pointHoverBorderWidth: 2,\r\n        pointRadius: 2,\r\n        pointHitRadius: 10,\r\n        data: sliced.map(it => it.mainlandChina)\r\n      },\r\n      {\r\n        label: \"Other Countries\",\r\n        fill: false,\r\n        lineTension: 0,\r\n        borderWidth: 2,\r\n        backgroundColor: \"blue\",\r\n        borderColor: \"blue\",\r\n        borderCapStyle: \"butt\",\r\n        borderDash: [],\r\n        borderDashOffset: 0.0,\r\n        borderJoinStyle: \"miter\",\r\n        pointBorderColor: \"blue\",\r\n        pointBackgroundColor: \"blue\",\r\n        pointBorderWidth: 1,\r\n        pointHoverRadius: 5,\r\n        pointHoverBackgroundColor: \"blue\",\r\n        pointHoverBorderColor: \"rgba(220,220,220,1)\",\r\n        pointHoverBorderWidth: 2,\r\n        pointRadius: 2,\r\n        pointHitRadius: 10,\r\n        data: sliced.map(it => it.otherLocations)\r\n      },\r\n      {\r\n        label: \"Recovered\",\r\n        fill: false,\r\n        lineTension: 0,\r\n        borderWidth: 2,\r\n        backgroundColor: \"green\",\r\n        borderColor: \"green\",\r\n        borderCapStyle: \"butt\",\r\n        borderDash: [],\r\n        borderDashOffset: 0.0,\r\n        borderJoinStyle: \"miter\",\r\n        pointBorderColor: \"green\",\r\n        pointBackgroundColor: \"green\",\r\n        pointBorderWidth: 1,\r\n        pointHoverRadius: 5,\r\n        pointHoverBackgroundColor: \"green\",\r\n        pointHoverBorderColor: \"rgba(220,220,220,1)\",\r\n        pointHoverBorderWidth: 2,\r\n        pointRadius: 2,\r\n        pointHitRadius: 10,\r\n        data: sliced.map(it => it.totalRecovered)\r\n      }\r\n    ]\r\n  };\r\n};\r\n\r\nconst getChartOptions = type => {\r\n  return {\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    legend: {\r\n      position: \"top\",\r\n      labels: {\r\n        usePointStyle: true,\r\n        boxWidth: 8\r\n      }\r\n    },\r\n    tooltips: {\r\n      mode: \"index\",\r\n      callbacks: {\r\n        label: function(tooltipItem, data) {\r\n          var label = data.datasets[tooltipItem.datasetIndex].label || \"\";\r\n          if (label) {\r\n            label += \": \";\r\n          }\r\n          label += tooltipItem.yLabel.toLocaleString();\r\n          return label;\r\n        }\r\n      }\r\n    },\r\n    scales: {\r\n      xAxes,\r\n      yAxes\r\n    },\r\n    title: {\r\n      display: \"Display\",\r\n      fontSize: 20,\r\n      text: \"Coronavirs Cases - Overall Stats\"\r\n    }\r\n  };\r\n};\r\n\r\nconst xAxes = [\r\n  {\r\n    type: \"time\",\r\n    distribution: \"series\",\r\n    gridLines: {\r\n      display: false\r\n    },\r\n    scaleLabel: {\r\n      display: true,\r\n      labelString: \"Date (Last 40 days)\",\r\n      fontSize: 15\r\n    },\r\n    ticks: {\r\n      major: {\r\n        enabled: true,\r\n        fontStyle: \"bold\"\r\n      },\r\n      source: \"data\",\r\n      autoSkip: true,\r\n      autoSkipPadding: 0,\r\n      maxRotation: 50\r\n    },\r\n    time: {\r\n      tooltipFormat: \"MM/DD/YYYY\",\r\n      displayFormats: {\r\n        month: \"MMM DD\"\r\n      }\r\n    }\r\n  }\r\n];\r\n\r\nconst yAxes = [\r\n  {\r\n    scaleLabel: {\r\n      display: true,\r\n      labelString: \"Number of cases (in thousands)\",\r\n      fontSize: 15\r\n    },\r\n    ticks: {\r\n      beginAtZero: true,\r\n      userCallback: function(value, index, values) {\r\n        return value.toLocaleString(); // this is all we need\r\n      }\r\n    }\r\n  }\r\n];\r\n\r\nexport { getChartData, getChartOptions, getBarChartData, getBarChartOptions };\r\n"]},"metadata":{},"sourceType":"module"}