{"ast":null,"code":"var _jsxFileName = \"C:\\\\Learning\\\\coronavirus-tracker\\\\components\\\\Stats.js\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport useFetch from \"../utils/useFetch\";\nimport { Card } from \"semantic-ui-react\";\nimport { numberWithCommas } from \"../utils/format\";\nconst Stats = React.memo(({\n  url\n}) => {\n  const {\n    stats,\n    loading,\n    error\n  } = useFetch(url); //console.log(\"Stats component loading\", stats, loading, error);\n\n  if (loading) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10\n    },\n    __self: this\n  }, \"Loading Stats...\");\n  if (error) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  }, \"API Error => \", error.toString());\n  if (stats.error) return __jsx(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, \"No data found. API error => \", stats.error.message);\n  const items = [{\n    header: \"Total\",\n    description: `${numberWithCommas(stats.confirmed.value)}`,\n    color: \"grey\",\n    meta: \"\",\n    width: \"10\"\n  }, {\n    header: \"Recovered\",\n    color: \"green\",\n    description: `${numberWithCommas(stats.recovered.value)}`,\n    meta: \"\"\n  }, {\n    header: \"Deaths\",\n    color: \"red\",\n    description: `${numberWithCommas(stats.deaths.value)}`,\n    meta: \"\"\n  }];\n  return __jsx(React.Fragment, null, __jsx(Card.Group, {\n    stackable: true,\n    itemsPerRow: 3,\n    items: items,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }));\n});\nexport default Stats;","map":{"version":3,"sources":["C:/Learning/coronavirus-tracker/components/Stats.js"],"names":["React","useFetch","Card","numberWithCommas","Stats","memo","url","stats","loading","error","toString","message","items","header","description","confirmed","value","color","meta","width","recovered","deaths"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,mBAArB;AACA,SAASC,IAAT,QAAqB,mBAArB;AACA,SAASC,gBAAT,QAAiC,iBAAjC;AAEA,MAAMC,KAAK,GAAGJ,KAAK,CAACK,IAAN,CAAW,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAa;AACpC,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA,OAAT;AAAkBC,IAAAA;AAAlB,MAA4BR,QAAQ,CAACK,GAAD,CAA1C,CADoC,CAEpC;;AAEA,MAAIE,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAP;AAEb,MAAIC,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAiBA,KAAK,CAACC,QAAN,EAAjB,CAAP;AAEX,MAAIH,KAAK,CAACE,KAAV,EACE,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAAiCF,KAAK,CAACE,KAAN,CAAYE,OAA7C,CAAP;AAEF,QAAMC,KAAK,GAAG,CACZ;AACEC,IAAAA,MAAM,EAAE,OADV;AAEEC,IAAAA,WAAW,EAAG,GAAEX,gBAAgB,CAACI,KAAK,CAACQ,SAAN,CAAgBC,KAAjB,CAAwB,EAF1D;AAGEC,IAAAA,KAAK,EAAE,MAHT;AAIEC,IAAAA,IAAI,EAAE,EAJR;AAKEC,IAAAA,KAAK,EAAE;AALT,GADY,EAQZ;AACEN,IAAAA,MAAM,EAAE,WADV;AAEEI,IAAAA,KAAK,EAAE,OAFT;AAGEH,IAAAA,WAAW,EAAG,GAAEX,gBAAgB,CAACI,KAAK,CAACa,SAAN,CAAgBJ,KAAjB,CAAwB,EAH1D;AAIEE,IAAAA,IAAI,EAAE;AAJR,GARY,EAcZ;AACEL,IAAAA,MAAM,EAAE,QADV;AAEEI,IAAAA,KAAK,EAAE,KAFT;AAGEH,IAAAA,WAAW,EAAG,GAAEX,gBAAgB,CAACI,KAAK,CAACc,MAAN,CAAaL,KAAd,CAAqB,EAHvD;AAIEE,IAAAA,IAAI,EAAE;AAJR,GAdY,CAAd;AAsBA,SACE,4BACE,MAAC,IAAD,CAAM,KAAN;AAAY,IAAA,SAAS,EAAE,IAAvB;AAA6B,IAAA,WAAW,EAAE,CAA1C;AAA6C,IAAA,KAAK,EAAEN,KAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKD,CAtCa,CAAd;AAwCA,eAAeR,KAAf","sourcesContent":["import React from \"react\";\r\nimport useFetch from \"../utils/useFetch\";\r\nimport { Card } from \"semantic-ui-react\";\r\nimport { numberWithCommas } from \"../utils/format\";\r\n\r\nconst Stats = React.memo(({ url }) => {\r\n  const { stats, loading, error } = useFetch(url);\r\n  //console.log(\"Stats component loading\", stats, loading, error);\r\n\r\n  if (loading) return <p>Loading Stats...</p>;\r\n\r\n  if (error) return <p>API Error => {error.toString()}</p>;\r\n\r\n  if (stats.error)\r\n    return <h3>No data found. API error => {stats.error.message}</h3>;\r\n\r\n  const items = [\r\n    {\r\n      header: \"Total\",\r\n      description: `${numberWithCommas(stats.confirmed.value)}`,\r\n      color: \"grey\",\r\n      meta: \"\",\r\n      width: \"10\"\r\n    },\r\n    {\r\n      header: \"Recovered\",\r\n      color: \"green\",\r\n      description: `${numberWithCommas(stats.recovered.value)}`,\r\n      meta: \"\"\r\n    },\r\n    {\r\n      header: \"Deaths\",\r\n      color: \"red\",\r\n      description: `${numberWithCommas(stats.deaths.value)}`,\r\n      meta: \"\"\r\n    }\r\n  ];\r\n\r\n  return (\r\n    <>\r\n      <Card.Group stackable={true} itemsPerRow={3} items={items} />\r\n    </>\r\n  );\r\n});\r\n\r\nexport default Stats;\r\n"]},"metadata":{},"sourceType":"module"}