{"ast":null,"code":"const getBarChartData = (apiData, selectedState) => {\n  console.log(\"Locations in chart utils\", apiData, selectedState);\n  const list = apiData.filter(x => x.country_code === selectedState.iso2);\n  console.log(\"List \", list);\n  const tmpList = list.filter(x => x.province === selectedState.provinceState);\n  console.log(\"tmp List\", tmpList);\n  const record = list.length > 1 ? list.find(x => x.province === selectedState.provinceState) : list[0];\n  console.log(\"record\", record);\n  const sorted = Object.keys(record.history).sort((a, b) => new Date(a) - new Date(b));\n  const labels = sorted.slice(-15);\n  return {\n    labels,\n    datasets: [{\n      label: \"Daily cases\",\n      backgroundColor: \"#ff8c00\",\n      borderColor: \"grey\",\n      borderWidth: 1,\n      hoverBackgroundColor: \"#ffa500\",\n      hoverBorderColor: \"#ffa500\",\n      data: labels.map(label => record.history[label])\n    }]\n  };\n};\n\nconst getBarChartOptions = selectedState => {\n  return {\n    responsive: true,\n    maintainAspectRatio: false,\n    legend: {\n      display: false\n    },\n    tooltips: {\n      mode: \"index\",\n      callbacks: {\n        label: function (tooltipItem, data) {\n          var label = data.datasets[tooltipItem.datasetIndex].label || \"\";\n\n          if (label) {\n            label += \": \";\n          }\n\n          label += tooltipItem.yLabel.toLocaleString();\n          return label;\n        }\n      }\n    },\n    scales: {\n      xAxes: xAxesBar,\n      yAxes: yAxesBar\n    },\n    title: {\n      display: \"Display\",\n      fontSize: 15,\n      text: selectedState.provinceState ? \"Daily New Cases in \" + selectedState.provinceState : \"Daily New Cases in \" + selectedState.countryName\n    }\n  };\n};\n\nconst getChartData = (chartType, apiData) => {\n  //console.log(\"Api data\", apiData.slice(-10));\n  let sliced = apiData.slice(-40);\n  return {\n    labels: sliced.map(it => it.reportDateString),\n    datasets: [{\n      label: \"Total\",\n      fill: false,\n      lineTension: 0,\n      borderWidth: 2,\n      pointBackgroundColor: \"red\",\n      pointBorderColor: \"red\",\n      pointHoverRadius: 5,\n      pointRadius: 2,\n      backgroundColor: \"red\",\n      pointHoverBackgroundColor: \"red\",\n      pointHoverBorderColor: \"rgba(220,220,220,1)\",\n      pointBorderWidth: 1,\n      pointHoverRadius: 5,\n      borderColor: \"red\",\n      data: sliced.map(it => it.totalConfirmed)\n    }, {\n      label: \"China\",\n      fill: false,\n      lineTension: 0,\n      borderWidth: 2,\n      backgroundColor: \"orange\",\n      borderColor: \"orange\",\n      borderCapStyle: \"butt\",\n      borderDash: [],\n      borderDashOffset: 0.0,\n      borderJoinStyle: \"miter\",\n      pointBorderColor: \"orange\",\n      pointBackgroundColor: \"orange\",\n      pointBorderWidth: 1,\n      pointHoverRadius: 5,\n      pointHoverBackgroundColor: \"orange\",\n      pointHoverBorderColor: \"rgba(220,220,220,1)\",\n      pointHoverBorderWidth: 2,\n      pointRadius: 2,\n      pointHitRadius: 10,\n      data: sliced.map(it => it.mainlandChina)\n    }, {\n      label: \"Other Countries\",\n      fill: false,\n      lineTension: 0,\n      borderWidth: 2,\n      backgroundColor: \"blue\",\n      borderColor: \"blue\",\n      borderCapStyle: \"butt\",\n      borderDash: [],\n      borderDashOffset: 0.0,\n      borderJoinStyle: \"miter\",\n      pointBorderColor: \"blue\",\n      pointBackgroundColor: \"blue\",\n      pointBorderWidth: 1,\n      pointHoverRadius: 5,\n      pointHoverBackgroundColor: \"blue\",\n      pointHoverBorderColor: \"rgba(220,220,220,1)\",\n      pointHoverBorderWidth: 2,\n      pointRadius: 2,\n      pointHitRadius: 10,\n      data: sliced.map(it => it.otherLocations)\n    }, {\n      label: \"Recovered\",\n      fill: false,\n      lineTension: 0,\n      borderWidth: 2,\n      backgroundColor: \"green\",\n      borderColor: \"green\",\n      borderCapStyle: \"butt\",\n      borderDash: [],\n      borderDashOffset: 0.0,\n      borderJoinStyle: \"miter\",\n      pointBorderColor: \"green\",\n      pointBackgroundColor: \"green\",\n      pointBorderWidth: 1,\n      pointHoverRadius: 5,\n      pointHoverBackgroundColor: \"green\",\n      pointHoverBorderColor: \"rgba(220,220,220,1)\",\n      pointHoverBorderWidth: 2,\n      pointRadius: 2,\n      pointHitRadius: 10,\n      data: sliced.map(it => it.totalRecovered)\n    }]\n  };\n};\n\nconst getChartOptions = type => {\n  return {\n    responsive: true,\n    maintainAspectRatio: false,\n    legend: {\n      position: \"top\",\n      labels: {\n        usePointStyle: true,\n        boxWidth: 8\n      }\n    },\n    tooltips: {\n      mode: \"index\",\n      callbacks: {\n        label: function (tooltipItem, data) {\n          var label = data.datasets[tooltipItem.datasetIndex].label || \"\";\n\n          if (label) {\n            label += \": \";\n          }\n\n          label += tooltipItem.yLabel.toLocaleString();\n          return label;\n        }\n      }\n    },\n    scales: {\n      xAxes,\n      yAxes\n    },\n    title: {\n      display: \"Display\",\n      fontSize: 20,\n      text: \"Coronavirs Cases - Overall Stats\"\n    }\n  };\n};\n\nconst xAxes = [{\n  type: \"time\",\n  distribution: \"series\",\n  gridLines: {\n    display: false\n  },\n  scaleLabel: {\n    display: true,\n    labelString: \"Date (Last 40 days)\",\n    fontSize: 15\n  },\n  ticks: {\n    major: {\n      enabled: true,\n      fontStyle: \"bold\"\n    },\n    source: \"data\",\n    autoSkip: true,\n    autoSkipPadding: 0,\n    maxRotation: 50\n  },\n  time: {\n    tooltipFormat: \"MM/DD/YYYY\",\n    displayFormats: {\n      month: \"MMM DD\"\n    }\n  }\n}];\nconst yAxes = [{\n  scaleLabel: {\n    display: true,\n    labelString: \"Number of cases\",\n    fontSize: 15\n  },\n  ticks: {\n    beginAtZero: true,\n    userCallback: function (value, index, values) {\n      return value.toLocaleString(); // this is all we need\n    }\n  }\n}];\nconst xAxesBar = [{\n  type: \"time\",\n  offset: true,\n  distribution: \"series\",\n  gridLines: {\n    display: false\n  },\n  scaleLabel: {\n    display: true,\n    labelString: \"Date (Last 15 days)\",\n    fontSize: 15\n  },\n  ticks: {\n    major: {\n      enabled: true\n    },\n    source: \"data\",\n    autoSkip: true,\n    autoSkipPadding: 0,\n    maxRotation: 50\n  },\n  time: {\n    tooltipFormat: \"MMM DD\",\n    displayFormats: {\n      month: \"MMM DD\"\n    }\n  }\n}];\nconst yAxesBar = [{\n  scaleLabel: {\n    display: true,\n    labelString: \"Number of cases\",\n    fontSize: 15\n  },\n  ticks: {\n    beginAtZero: true,\n    userCallback: function (value, index, values) {\n      return value.toLocaleString(); // this is all we need\n    }\n  }\n}];\nexport { getChartData, getChartOptions, getBarChartData, getBarChartOptions };","map":{"version":3,"sources":["C:/Learning/coronavirus-tracker/utils/chartUtils.js"],"names":["getBarChartData","apiData","selectedState","console","log","list","filter","x","country_code","iso2","tmpList","province","provinceState","record","length","find","sorted","Object","keys","history","sort","a","b","Date","labels","slice","datasets","label","backgroundColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","data","map","getBarChartOptions","responsive","maintainAspectRatio","legend","display","tooltips","mode","callbacks","tooltipItem","datasetIndex","yLabel","toLocaleString","scales","xAxes","xAxesBar","yAxes","yAxesBar","title","fontSize","text","countryName","getChartData","chartType","sliced","it","reportDateString","fill","lineTension","pointBackgroundColor","pointBorderColor","pointHoverRadius","pointRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointBorderWidth","totalConfirmed","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointHoverBorderWidth","pointHitRadius","mainlandChina","otherLocations","totalRecovered","getChartOptions","type","position","usePointStyle","boxWidth","distribution","gridLines","scaleLabel","labelString","ticks","major","enabled","fontStyle","source","autoSkip","autoSkipPadding","maxRotation","time","tooltipFormat","displayFormats","month","beginAtZero","userCallback","value","index","values","offset"],"mappings":"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","sourcesContent":["const getBarChartData = (apiData, selectedState) => {\r\n  console.log(\"Locations in chart utils\", apiData, selectedState);\r\n  const list = apiData.filter(x => x.country_code === selectedState.iso2);\r\n  console.log(\"List \", list);\r\n  const tmpList = list.filter(x => x.province === selectedState.provinceState);\r\n  console.log(\"tmp List\", tmpList);\r\n  const record =\r\n    list.length > 1\r\n      ? list.find(x => x.province === selectedState.provinceState)\r\n      : list[0];\r\n\r\n  console.log(\"record\", record);\r\n\r\n  const sorted = Object.keys(record.history).sort(\r\n    (a, b) => new Date(a) - new Date(b)\r\n  );\r\n\r\n  const labels = sorted.slice(-15);\r\n\r\n  return {\r\n    labels,\r\n    datasets: [\r\n      {\r\n        label: \"Daily cases\",\r\n        backgroundColor: \"#ff8c00\",\r\n        borderColor: \"grey\",\r\n        borderWidth: 1,\r\n        hoverBackgroundColor: \"#ffa500\",\r\n        hoverBorderColor: \"#ffa500\",\r\n        data: labels.map(label => record.history[label])\r\n      }\r\n    ]\r\n  };\r\n};\r\n\r\nconst getBarChartOptions = selectedState => {\r\n  return {\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    legend: {\r\n      display: false\r\n    },\r\n    tooltips: {\r\n      mode: \"index\",\r\n      callbacks: {\r\n        label: function(tooltipItem, data) {\r\n          var label = data.datasets[tooltipItem.datasetIndex].label || \"\";\r\n          if (label) {\r\n            label += \": \";\r\n          }\r\n          label += tooltipItem.yLabel.toLocaleString();\r\n          return label;\r\n        }\r\n      }\r\n    },\r\n    scales: {\r\n      xAxes: xAxesBar,\r\n      yAxes: yAxesBar\r\n    },\r\n    title: {\r\n      display: \"Display\",\r\n      fontSize: 15,\r\n      text: selectedState.provinceState\r\n        ? \"Daily New Cases in \" + selectedState.provinceState\r\n        : \"Daily New Cases in \" + selectedState.countryName\r\n    }\r\n  };\r\n};\r\n\r\nconst getChartData = (chartType, apiData) => {\r\n  //console.log(\"Api data\", apiData.slice(-10));\r\n  let sliced = apiData.slice(-40);\r\n\r\n  return {\r\n    labels: sliced.map(it => it.reportDateString),\r\n    datasets: [\r\n      {\r\n        label: \"Total\",\r\n        fill: false,\r\n        lineTension: 0,\r\n        borderWidth: 2,\r\n        pointBackgroundColor: \"red\",\r\n        pointBorderColor: \"red\",\r\n        pointHoverRadius: 5,\r\n        pointRadius: 2,\r\n        backgroundColor: \"red\",\r\n        pointHoverBackgroundColor: \"red\",\r\n        pointHoverBorderColor: \"rgba(220,220,220,1)\",\r\n        pointBorderWidth: 1,\r\n        pointHoverRadius: 5,\r\n        borderColor: \"red\",\r\n        data: sliced.map(it => it.totalConfirmed)\r\n      },\r\n      {\r\n        label: \"China\",\r\n        fill: false,\r\n        lineTension: 0,\r\n        borderWidth: 2,\r\n        backgroundColor: \"orange\",\r\n        borderColor: \"orange\",\r\n        borderCapStyle: \"butt\",\r\n        borderDash: [],\r\n        borderDashOffset: 0.0,\r\n        borderJoinStyle: \"miter\",\r\n        pointBorderColor: \"orange\",\r\n        pointBackgroundColor: \"orange\",\r\n        pointBorderWidth: 1,\r\n        pointHoverRadius: 5,\r\n        pointHoverBackgroundColor: \"orange\",\r\n        pointHoverBorderColor: \"rgba(220,220,220,1)\",\r\n        pointHoverBorderWidth: 2,\r\n        pointRadius: 2,\r\n        pointHitRadius: 10,\r\n        data: sliced.map(it => it.mainlandChina)\r\n      },\r\n      {\r\n        label: \"Other Countries\",\r\n        fill: false,\r\n        lineTension: 0,\r\n        borderWidth: 2,\r\n        backgroundColor: \"blue\",\r\n        borderColor: \"blue\",\r\n        borderCapStyle: \"butt\",\r\n        borderDash: [],\r\n        borderDashOffset: 0.0,\r\n        borderJoinStyle: \"miter\",\r\n        pointBorderColor: \"blue\",\r\n        pointBackgroundColor: \"blue\",\r\n        pointBorderWidth: 1,\r\n        pointHoverRadius: 5,\r\n        pointHoverBackgroundColor: \"blue\",\r\n        pointHoverBorderColor: \"rgba(220,220,220,1)\",\r\n        pointHoverBorderWidth: 2,\r\n        pointRadius: 2,\r\n        pointHitRadius: 10,\r\n        data: sliced.map(it => it.otherLocations)\r\n      },\r\n      {\r\n        label: \"Recovered\",\r\n        fill: false,\r\n        lineTension: 0,\r\n        borderWidth: 2,\r\n        backgroundColor: \"green\",\r\n        borderColor: \"green\",\r\n        borderCapStyle: \"butt\",\r\n        borderDash: [],\r\n        borderDashOffset: 0.0,\r\n        borderJoinStyle: \"miter\",\r\n        pointBorderColor: \"green\",\r\n        pointBackgroundColor: \"green\",\r\n        pointBorderWidth: 1,\r\n        pointHoverRadius: 5,\r\n        pointHoverBackgroundColor: \"green\",\r\n        pointHoverBorderColor: \"rgba(220,220,220,1)\",\r\n        pointHoverBorderWidth: 2,\r\n        pointRadius: 2,\r\n        pointHitRadius: 10,\r\n        data: sliced.map(it => it.totalRecovered)\r\n      }\r\n    ]\r\n  };\r\n};\r\n\r\nconst getChartOptions = type => {\r\n  return {\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    legend: {\r\n      position: \"top\",\r\n      labels: {\r\n        usePointStyle: true,\r\n        boxWidth: 8\r\n      }\r\n    },\r\n    tooltips: {\r\n      mode: \"index\",\r\n      callbacks: {\r\n        label: function(tooltipItem, data) {\r\n          var label = data.datasets[tooltipItem.datasetIndex].label || \"\";\r\n          if (label) {\r\n            label += \": \";\r\n          }\r\n          label += tooltipItem.yLabel.toLocaleString();\r\n          return label;\r\n        }\r\n      }\r\n    },\r\n    scales: {\r\n      xAxes,\r\n      yAxes\r\n    },\r\n    title: {\r\n      display: \"Display\",\r\n      fontSize: 20,\r\n      text: \"Coronavirs Cases - Overall Stats\"\r\n    }\r\n  };\r\n};\r\n\r\nconst xAxes = [\r\n  {\r\n    type: \"time\",\r\n    distribution: \"series\",\r\n    gridLines: {\r\n      display: false\r\n    },\r\n    scaleLabel: {\r\n      display: true,\r\n      labelString: \"Date (Last 40 days)\",\r\n      fontSize: 15\r\n    },\r\n    ticks: {\r\n      major: {\r\n        enabled: true,\r\n        fontStyle: \"bold\"\r\n      },\r\n      source: \"data\",\r\n      autoSkip: true,\r\n      autoSkipPadding: 0,\r\n      maxRotation: 50\r\n    },\r\n    time: {\r\n      tooltipFormat: \"MM/DD/YYYY\",\r\n      displayFormats: {\r\n        month: \"MMM DD\"\r\n      }\r\n    }\r\n  }\r\n];\r\n\r\nconst yAxes = [\r\n  {\r\n    scaleLabel: {\r\n      display: true,\r\n      labelString: \"Number of cases\",\r\n      fontSize: 15\r\n    },\r\n    ticks: {\r\n      beginAtZero: true,\r\n      userCallback: function(value, index, values) {\r\n        return value.toLocaleString(); // this is all we need\r\n      }\r\n    }\r\n  }\r\n];\r\n\r\nconst xAxesBar = [\r\n  {\r\n    type: \"time\",\r\n    offset: true,\r\n    distribution: \"series\",\r\n    gridLines: {\r\n      display: false\r\n    },\r\n    scaleLabel: {\r\n      display: true,\r\n      labelString: \"Date (Last 15 days)\",\r\n      fontSize: 15\r\n    },\r\n    ticks: {\r\n      major: {\r\n        enabled: true\r\n      },\r\n      source: \"data\",\r\n      autoSkip: true,\r\n      autoSkipPadding: 0,\r\n      maxRotation: 50\r\n    },\r\n    time: {\r\n      tooltipFormat: \"MMM DD\",\r\n      displayFormats: {\r\n        month: \"MMM DD\"\r\n      }\r\n    }\r\n  }\r\n];\r\n\r\nconst yAxesBar = [\r\n  {\r\n    scaleLabel: {\r\n      display: true,\r\n      labelString: \"Number of cases\",\r\n      fontSize: 15\r\n    },\r\n    ticks: {\r\n      beginAtZero: true,\r\n      userCallback: function(value, index, values) {\r\n        return value.toLocaleString(); // this is all we need\r\n      }\r\n    }\r\n  }\r\n];\r\n\r\nexport { getChartData, getChartOptions, getBarChartData, getBarChartOptions };\r\n"]},"metadata":{},"sourceType":"module"}