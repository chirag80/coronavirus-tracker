{"ast":null,"code":"var _jsxFileName = \"C:\\\\Learning\\\\coronavirus-tracker\\\\pages\\\\index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport CountrySelector from \"../components/CountrySelector\";\nimport Stats from \"../components/Stats\";\nimport { useState, useMemo } from \"react\";\nimport { Container } from \"semantic-ui-react\";\nimport { Grid, Segment, Responsive, Button } from \"semantic-ui-react\";\nimport Chart from \"../components/Chart\";\nimport StateStats from \"../components/StateStats\";\nimport BarChart from \"../components/BarChart\";\n\nconst Index = () => {\n  const {\n    0: url,\n    1: setUrl\n  } = useState(\"https://covid19.mathdro.id/api\");\n  const {\n    0: selectedCountry,\n    1: setSelected\n  } = useState({\n    iso2: \"\",\n    iso3: \"\"\n  });\n  const {\n    0: quickLinkState,\n    1: setQuickLink\n  } = useState(undefined);\n  const memoStatsComponent = useMemo(() => __jsx(Stats, {\n    url: url,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }), [url]);\n  const memoStateStats = useMemo(() => __jsx(StateStats, {\n    iso3: selectedCountry.iso3,\n    iso2: selectedCountry.iso3,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }), [selectedCountry]);\n\n  const onChange = (iso2, iso3) => {\n    //this is to load state dropdown for StateStats\n    setSelected({\n      iso2,\n      iso3\n    });\n\n    if (iso2 === \"world\") {\n      setUrl(\"https://covid19.mathdro.id/api\");\n    } else {\n      //this is to load statistics of selected country. country is iso2 code\n      setUrl(`https://covid19.mathdro.id/api/countries/${iso2}`);\n    }\n  };\n\n  const memoBarChartComp = useMemo(() => __jsx(BarChart, {\n    selectedState: quickLinkState,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }), [quickLinkState]);\n\n  const handleBtnClick = (provinceState, iso2, countryName) => {\n    setQuickLink({\n      iso2,\n      provinceState,\n      countryName\n    });\n  };\n\n  return __jsx(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, __jsx(Grid, {\n    stackable: true,\n    stretched: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, __jsx(Grid.Row, {\n    stretched: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, __jsx(Grid.Column, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, __jsx(Responsive, {\n    as: Segment,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, __jsx(Chart, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  })))), __jsx(Grid.Row, {\n    stretched: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, __jsx(Grid.Column, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, __jsx(Responsive, {\n    as: Segment,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, __jsx(CountrySelector, {\n    onChange: onChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }), __jsx(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }), memoStatsComponent))), __jsx(Grid.Row, {\n    stretched: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, __jsx(Grid.Column, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, __jsx(Responsive, {\n    as: Segment,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, memoStateStats))), __jsx(Grid.Row, {\n    stretched: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, __jsx(Grid.Column, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, __jsx(Responsive, {\n    as: Segment,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, __jsx(Button, {\n    size: \"mini\",\n    onClick: (e, data) => {\n      handleBtnClick(data.children, \"US\", \"USA\");\n    },\n    color: \"blue\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, \"New Jersey\"), __jsx(Button, {\n    size: \"mini\",\n    onClick: (e, data) => {\n      handleBtnClick(data.children, \"US\", \"USA\");\n    },\n    color: \"blue\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, \"New York\"), __jsx(Button, {\n    size: \"mini\",\n    onClick: (e, data) => {\n      handleBtnClick(data.children, \"US\", \"USA\");\n    },\n    color: \"blue\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, \"California\"), __jsx(Button, {\n    size: \"mini\",\n    onClick: (e, data) => {\n      handleBtnClick(data.children, \"US\", \"USA\");\n    },\n    color: \"blue\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, \"Washington\"), __jsx(Button, {\n    size: \"mini\",\n    onClick: (e, data) => {\n      handleBtnClick(data.children, \"US\", \"USA\");\n    },\n    color: \"blue\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, \"Massachusetts\"), __jsx(Button, {\n    size: \"mini\",\n    onClick: (e, data) => {\n      handleBtnClick(undefined, \"IN\", \"India\");\n    },\n    color: \"blue\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, \"India\"), __jsx(Button, {\n    size: \"mini\",\n    onClick: (e, data) => {\n      handleBtnClick(undefined, \"IT\", \"Italy\");\n    },\n    color: \"blue\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }, \"Italy\"), __jsx(Button, {\n    size: \"mini\",\n    onClick: (e, data) => {\n      handleBtnClick(undefined, \"IR\", \"Iran\");\n    },\n    color: \"blue\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, \"Iran\"), __jsx(Button, {\n    size: \"mini\",\n    onClick: (e, data) => {\n      handleBtnClick(undefined, \"KR\", \"Korea, South\");\n    },\n    color: \"blue\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }, \"South Korea\"), __jsx(Button, {\n    size: \"mini\",\n    onClick: (e, data) => {\n      handleBtnClick(\"France\", \"FR\", \"France\");\n    },\n    color: \"blue\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }, \"France\"), quickLinkState && memoBarChartComp)))));\n};\n\nexport default Index;","map":{"version":3,"sources":["C:/Learning/coronavirus-tracker/pages/index.js"],"names":["CountrySelector","Stats","useState","useMemo","Container","Grid","Segment","Responsive","Button","Chart","StateStats","BarChart","Index","url","setUrl","selectedCountry","setSelected","iso2","iso3","quickLinkState","setQuickLink","undefined","memoStatsComponent","memoStateStats","onChange","memoBarChartComp","handleBtnClick","provinceState","countryName","e","data","children"],"mappings":"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","sourcesContent":["import CountrySelector from \"../components/CountrySelector\";\r\nimport Stats from \"../components/Stats\";\r\nimport { useState, useMemo } from \"react\";\r\nimport { Container } from \"semantic-ui-react\";\r\nimport { Grid, Segment, Responsive, Button } from \"semantic-ui-react\";\r\nimport Chart from \"../components/Chart\";\r\nimport StateStats from \"../components/StateStats\";\r\nimport BarChart from \"../components/BarChart\";\r\n\r\nconst Index = () => {\r\n  const [url, setUrl] = useState(\"https://covid19.mathdro.id/api\");\r\n\r\n  const [selectedCountry, setSelected] = useState({ iso2: \"\", iso3: \"\" });\r\n\r\n  const [quickLinkState, setQuickLink] = useState(undefined);\r\n\r\n  const memoStatsComponent = useMemo(() => <Stats url={url} />, [url]);\r\n\r\n  const memoStateStats = useMemo(\r\n    () => (\r\n      <StateStats iso3={selectedCountry.iso3} iso2={selectedCountry.iso3} />\r\n    ),\r\n    [selectedCountry]\r\n  );\r\n\r\n  const onChange = (iso2, iso3) => {\r\n    //this is to load state dropdown for StateStats\r\n    setSelected({ iso2, iso3 });\r\n\r\n    if (iso2 === \"world\") {\r\n      setUrl(\"https://covid19.mathdro.id/api\");\r\n    } else {\r\n      //this is to load statistics of selected country. country is iso2 code\r\n      setUrl(`https://covid19.mathdro.id/api/countries/${iso2}`);\r\n    }\r\n  };\r\n\r\n  const memoBarChartComp = useMemo(\r\n    () => <BarChart selectedState={quickLinkState} />,\r\n    [quickLinkState]\r\n  );\r\n\r\n  const handleBtnClick = (provinceState, iso2, countryName) => {\r\n    setQuickLink({ iso2, provinceState, countryName });\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Grid stackable={true} stretched={true}>\r\n        <Grid.Row stretched>\r\n          <Grid.Column>\r\n            <Responsive as={Segment}>\r\n              <Chart />\r\n            </Responsive>\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n        <Grid.Row stretched>\r\n          <Grid.Column>\r\n            <Responsive as={Segment}>\r\n              <CountrySelector onChange={onChange} />\r\n              <br />\r\n              {memoStatsComponent}\r\n            </Responsive>\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n        <Grid.Row stretched>\r\n          <Grid.Column>\r\n            <Responsive as={Segment}>{memoStateStats}</Responsive>\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n        <Grid.Row stretched>\r\n          <Grid.Column>\r\n            <Responsive as={Segment}>\r\n              <Button\r\n                size='mini'\r\n                onClick={(e, data) => {\r\n                  handleBtnClick(data.children, \"US\", \"USA\");\r\n                }}\r\n                color='blue'\r\n              >\r\n                New Jersey\r\n              </Button>\r\n              <Button\r\n                size='mini'\r\n                onClick={(e, data) => {\r\n                  handleBtnClick(data.children, \"US\", \"USA\");\r\n                }}\r\n                color='blue'\r\n              >\r\n                New York\r\n              </Button>\r\n              <Button\r\n                size='mini'\r\n                onClick={(e, data) => {\r\n                  handleBtnClick(data.children, \"US\", \"USA\");\r\n                }}\r\n                color='blue'\r\n              >\r\n                California\r\n              </Button>\r\n              <Button\r\n                size='mini'\r\n                onClick={(e, data) => {\r\n                  handleBtnClick(data.children, \"US\", \"USA\");\r\n                }}\r\n                color='blue'\r\n              >\r\n                Washington\r\n              </Button>\r\n              <Button\r\n                size='mini'\r\n                onClick={(e, data) => {\r\n                  handleBtnClick(data.children, \"US\", \"USA\");\r\n                }}\r\n                color='blue'\r\n              >\r\n                Massachusetts\r\n              </Button>\r\n              <Button\r\n                size='mini'\r\n                onClick={(e, data) => {\r\n                  handleBtnClick(undefined, \"IN\", \"India\");\r\n                }}\r\n                color='blue'\r\n              >\r\n                India\r\n              </Button>\r\n              <Button\r\n                size='mini'\r\n                onClick={(e, data) => {\r\n                  handleBtnClick(undefined, \"IT\", \"Italy\");\r\n                }}\r\n                color='blue'\r\n              >\r\n                Italy\r\n              </Button>\r\n              <Button\r\n                size='mini'\r\n                onClick={(e, data) => {\r\n                  handleBtnClick(undefined, \"IR\", \"Iran\");\r\n                }}\r\n                color='blue'\r\n              >\r\n                Iran\r\n              </Button>\r\n              <Button\r\n                size='mini'\r\n                onClick={(e, data) => {\r\n                  handleBtnClick(undefined, \"KR\", \"Korea, South\");\r\n                }}\r\n                color='blue'\r\n              >\r\n                South Korea\r\n              </Button>\r\n              <Button\r\n                size='mini'\r\n                onClick={(e, data) => {\r\n                  handleBtnClick(\"France\", \"FR\", \"France\");\r\n                }}\r\n                color='blue'\r\n              >\r\n                France\r\n              </Button>\r\n\r\n              {quickLinkState && memoBarChartComp}\r\n            </Responsive>\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n      </Grid>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Index;\r\n"]},"metadata":{},"sourceType":"module"}