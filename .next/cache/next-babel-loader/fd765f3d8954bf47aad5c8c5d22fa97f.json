{"ast":null,"code":"var _jsxFileName = \"C:\\\\Learning\\\\coronavirus-tracker\\\\components\\\\CountrySelector.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport useFetch from \"../utils/useFetch\";\nimport { Dropdown, Grid, Segment, Label } from \"semantic-ui-react\";\n\nconst CountrySelector = ({\n  onChange\n}) => {\n  const {\n    stats: countries,\n    error,\n    loading\n  } = useFetch(\"https://covid19.mathdro.id/api/countries\");\n  if (loading) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  }, \"Countries Loading...\");\n  if (error) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11\n    },\n    __self: this\n  }, \"Error loading countries..\"); // change value with countries.iso3[code] if iso3 code required to be passed to API\n\n  let countryOptions = Object.entries(countries.countries).map(([name, code]) => {\n    return {\n      key: name,\n      value: code,\n      text: name\n    };\n  });\n  countryOptions = [{\n    key: \"world\",\n    value: \"world\",\n    text: \"World\"\n  }, ...countryOptions];\n  return __jsx(React.Fragment, null, __jsx(Grid, {\n    columns: \"equal\",\n    stackable: \"true\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, __jsx(Grid.Column, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, __jsx(Label, {\n    as: \"label\",\n    basic: true,\n    color: \"blue\",\n    size: \"big\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, \"Select Country\")), __jsx(Grid.Column, {\n    width: 8,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, __jsx(Dropdown, {\n    placeholder: \"Select Country\",\n    fluid: true,\n    search: true,\n    selection: true,\n    options: countryOptions,\n    defaultValue: \"world\",\n    onChange: (e, data) => {\n      onChange(data.value);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }))));\n};\n\nexport default CountrySelector;","map":{"version":3,"sources":["C:/Learning/coronavirus-tracker/components/CountrySelector.js"],"names":["useFetch","Dropdown","Grid","Segment","Label","CountrySelector","onChange","stats","countries","error","loading","countryOptions","Object","entries","map","name","code","key","value","text","e","data"],"mappings":";;;AAAA,OAAOA,QAAP,MAAqB,mBAArB;AACA,SAASC,QAAT,EAAmBC,IAAnB,EAAyBC,OAAzB,EAAkCC,KAAlC,QAA+C,mBAA/C;;AAEA,MAAMC,eAAe,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AACxC,QAAM;AAAEC,IAAAA,KAAK,EAAEC,SAAT;AAAoBC,IAAAA,KAApB;AAA2BC,IAAAA;AAA3B,MAAuCV,QAAQ,CACnD,0CADmD,CAArD;AAIA,MAAIU,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAP;AAEb,MAAID,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAAP,CAP6B,CASxC;;AACA,MAAIE,cAAc,GAAGC,MAAM,CAACC,OAAP,CAAeL,SAAS,CAACA,SAAzB,EAAoCM,GAApC,CACnB,CAAC,CAACC,IAAD,EAAOC,IAAP,CAAD,KAAkB;AAChB,WAAO;AAAEC,MAAAA,GAAG,EAAEF,IAAP;AAAaG,MAAAA,KAAK,EAAEF,IAApB;AAA0BG,MAAAA,IAAI,EAAEJ;AAAhC,KAAP;AACD,GAHkB,CAArB;AAMAJ,EAAAA,cAAc,GAAG,CACf;AAAEM,IAAAA,GAAG,EAAE,OAAP;AAAgBC,IAAAA,KAAK,EAAE,OAAvB;AAAgCC,IAAAA,IAAI,EAAE;AAAtC,GADe,EAEf,GAAGR,cAFY,CAAjB;AAKA,SACE,4BACE,MAAC,IAAD;AAAM,IAAA,OAAO,EAAC,OAAd;AAAsB,IAAA,SAAS,EAAC,MAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD,CAAM,MAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,KAAD;AAAO,IAAA,EAAE,EAAC,OAAV;AAAkB,IAAA,KAAK,MAAvB;AAAwB,IAAA,KAAK,EAAC,MAA9B;AAAqC,IAAA,IAAI,EAAC,KAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,CADF,EAME,MAAC,IAAD,CAAM,MAAN;AAAa,IAAA,KAAK,EAAE,CAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,QAAD;AACE,IAAA,WAAW,EAAC,gBADd;AAEE,IAAA,KAAK,MAFP;AAGE,IAAA,MAAM,MAHR;AAIE,IAAA,SAAS,MAJX;AAKE,IAAA,OAAO,EAAEA,cALX;AAME,IAAA,YAAY,EAAC,OANf;AAOE,IAAA,QAAQ,EAAE,CAACS,CAAD,EAAIC,IAAJ,KAAa;AACrBf,MAAAA,QAAQ,CAACe,IAAI,CAACH,KAAN,CAAR;AACD,KATH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CANF,CADF,CADF;AAwBD,CA7CD;;AA+CA,eAAeb,eAAf","sourcesContent":["import useFetch from \"../utils/useFetch\";\r\nimport { Dropdown, Grid, Segment, Label } from \"semantic-ui-react\";\r\n\r\nconst CountrySelector = ({ onChange }) => {\r\n  const { stats: countries, error, loading } = useFetch(\r\n    \"https://covid19.mathdro.id/api/countries\"\r\n  );\r\n\r\n  if (loading) return <p>Countries Loading...</p>;\r\n\r\n  if (error) return <p>Error loading countries..</p>;\r\n\r\n  // change value with countries.iso3[code] if iso3 code required to be passed to API\r\n  let countryOptions = Object.entries(countries.countries).map(\r\n    ([name, code]) => {\r\n      return { key: name, value: code, text: name };\r\n    }\r\n  );\r\n\r\n  countryOptions = [\r\n    { key: \"world\", value: \"world\", text: \"World\" },\r\n    ...countryOptions\r\n  ];\r\n\r\n  return (\r\n    <>\r\n      <Grid columns='equal' stackable='true'>\r\n        <Grid.Column>\r\n          <Label as='label' basic color='blue' size='big'>\r\n            Select Country\r\n          </Label>\r\n        </Grid.Column>\r\n        <Grid.Column width={8}>\r\n          <Dropdown\r\n            placeholder='Select Country'\r\n            fluid\r\n            search\r\n            selection\r\n            options={countryOptions}\r\n            defaultValue='world'\r\n            onChange={(e, data) => {\r\n              onChange(data.value);\r\n            }}\r\n          />\r\n        </Grid.Column>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CountrySelector;\r\n"]},"metadata":{},"sourceType":"module"}