{"version":3,"file":"static\\development\\pages\\index.js","sources":["webpack:///webpack/bootstrap","webpack:///./components/Chart.js","webpack:///./components/CountrySelector.js","webpack:///./components/StateStats.js","webpack:///./components/Stats.js","webpack:///./pages/index.js","webpack:///./utils/chartUtils.js","webpack:///./utils/format.js","webpack:///./utils/useFetch.js","webpack:///external \"react\"","webpack:///external \"react-chartjs-2\"","webpack:///external \"semantic-ui-react\""],"sourcesContent":[" \t// The module cache\n \tvar installedModules = require('../../../ssr-module-cache.js');\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tvar threw = true;\n \t\ttry {\n \t\t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n \t\t\tthrew = false;\n \t\t} finally {\n \t\t\tif(threw) delete installedModules[moduleId];\n \t\t}\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","import React from \"react\";\r\nimport useFetch from \"../utils/useFetch\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport { getChartDate, getChartOptions } from \"../utils/chartUtils\";\r\n\r\nconst Chart = () => {\r\n  const { stats, loading, error } = useFetch(\r\n    \"https://covid19.mathdro.id/api/daily\"\r\n  );\r\n\r\n  //console.log(\"Chart component loading\", stats, loading, error);\r\n\r\n  if (loading) return <p>Loading Chart...</p>;\r\n\r\n  if (error) return <p>Chart API Error => {error.toString()}</p>;\r\n\r\n  if (stats.error)\r\n    return <h3>No data found. Chart API error => {stats.error.message}</h3>;\r\n\r\n  let chartData = getChartDate(\"line\", stats);\r\n  let chartOptions = getChartOptions(\"line\");\r\n  return (\r\n    <div>\r\n      <Line data={chartData} options={chartOptions} height={130} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chart;\r\n","import React, { useState } from \"react\";\r\nimport useFetch from \"../utils/useFetch\";\r\nimport { Dropdown } from \"semantic-ui-react\";\r\n\r\nconst CountrySelector = ({ onChange }) => {\r\n  const { stats: countries, error, loading } = useFetch(\r\n    \"https://covid19.mathdro.id/api/countries\"\r\n  );\r\n\r\n  if (loading) return <p>Countries Loading...</p>;\r\n\r\n  if (error) return <p>Error loading countries..</p>;\r\n\r\n  let countryOptions = Object.entries(countries.countries).map(\r\n    ([name, code]) => {\r\n      return { key: name, value: countries.iso3[code], text: name };\r\n    }\r\n  );\r\n\r\n  countryOptions = [\r\n    { key: \"world\", value: \"world\", text: \"World\" },\r\n    ...countryOptions\r\n  ];\r\n\r\n  return (\r\n    <>\r\n      <Dropdown\r\n        placeholder='Select Country'\r\n        fluid\r\n        search\r\n        selection\r\n        options={countryOptions}\r\n        defaultValue='world'\r\n        onChange={(e, data) => {\r\n          onChange(data.value);\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CountrySelector;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport useFetch from \"../utils/useFetch\";\r\nimport { Card, Dropdown } from \"semantic-ui-react\";\r\nimport { numberWithCommas } from \"../utils/format\";\r\n\r\nconst StateStats = ({ country }) => {\r\n  if (country === \"world\") {\r\n    return <p>Select country to see state wise data</p>;\r\n  }\r\n\r\n  const [selectedState, setSelectedState] = useState(undefined);\r\n\r\n  useEffect(() => {\r\n    setSelectedState(undefined);\r\n  }, [country]);\r\n\r\n  const { stats: states, loading, error } = useFetch(\r\n    `https://covid19.mathdro.id/api/countries/${country}/confirmed`\r\n  );\r\n\r\n  if (loading) return <p>Loading States of selected country...</p>;\r\n\r\n  if (error) return <p>Retrieving states API Error => {error.toString()}</p>;\r\n\r\n  if (states.error)\r\n    return (\r\n      <h3>\r\n        No data found. Retrieving states API error => {stats.error.message}\r\n      </h3>\r\n    );\r\n\r\n  console.log(\"State wise info\", states);\r\n\r\n  let stateOptions = states.map(({ provinceState, countryRegion }, index) => ({\r\n    key: provinceState || countryRegion,\r\n    value: provinceState || countryRegion,\r\n    text: provinceState || countryRegion\r\n  }));\r\n\r\n  const onChange = selectedValue => {\r\n    let selected = states.find(state => state.provinceState === selectedValue);\r\n    console.log(\"Selected state info\", selected);\r\n    if (!selected) {\r\n      selected = states[0];\r\n    }\r\n    setSelectedState(selected);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Dropdown\r\n        placeholder='Select State'\r\n        fluid\r\n        search\r\n        selection\r\n        selectOnBlur={false}\r\n        options={stateOptions}\r\n        onChange={(e, data) => {\r\n          onChange(data.value);\r\n        }}\r\n      />\r\n      <br />\r\n      {selectedState && (\r\n        <Card.Group itemsPerRow={4}>\r\n          <Card\r\n            header='Confirmed'\r\n            description={\r\n              selectedState && numberWithCommas(selectedState.confirmed)\r\n            }\r\n            color='grey'\r\n            meta=''\r\n          />\r\n          <Card\r\n            header='Active'\r\n            description={\r\n              selectedState && numberWithCommas(selectedState.active)\r\n            }\r\n            color='blue'\r\n            meta=''\r\n          />\r\n          <Card\r\n            header='Recovered'\r\n            description={\r\n              selectedState && numberWithCommas(selectedState.recovered)\r\n            }\r\n            color='green'\r\n            meta=''\r\n          />\r\n          <Card\r\n            header='Deaths'\r\n            description={\r\n              selectedState && numberWithCommas(selectedState.deaths)\r\n            }\r\n            color='red'\r\n            meta=''\r\n          />\r\n        </Card.Group>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default StateStats;\r\n","import React from \"react\";\r\nimport useFetch from \"../utils/useFetch\";\r\nimport { Card } from \"semantic-ui-react\";\r\nimport { numberWithCommas } from \"../utils/format\";\r\n\r\nconst Stats = React.memo(({ url }) => {\r\n  const { stats, loading, error } = useFetch(url);\r\n  //console.log(\"Stats component loading\", stats, loading, error);\r\n\r\n  if (loading) return <p>Loading Stats...</p>;\r\n\r\n  if (error) return <p>API Error => {error.toString()}</p>;\r\n\r\n  if (stats.error)\r\n    return <h3>No data found. API error => {stats.error.message}</h3>;\r\n\r\n  const items = [\r\n    {\r\n      header: \"Coronavirus Cases\",\r\n      description: `${numberWithCommas(stats.confirmed.value)}`,\r\n      color: \"grey\",\r\n      meta: \"\"\r\n    },\r\n    {\r\n      header: \"Deaths\",\r\n      color: \"red\",\r\n      description: `${numberWithCommas(stats.deaths.value)}`,\r\n      meta: \"\"\r\n    },\r\n    {\r\n      header: \"Recovered\",\r\n      color: \"green\",\r\n      description: `${numberWithCommas(stats.recovered.value)}`,\r\n      meta: \"\"\r\n    }\r\n  ];\r\n\r\n  return (\r\n    <>\r\n      <Card.Group itemsPerRow={3} items={items} />\r\n    </>\r\n  );\r\n});\r\n\r\nexport default Stats;\r\n","import CountrySelector from \"../components/CountrySelector\";\r\nimport Stats from \"../components/Stats\";\r\nimport { useState, useMemo } from \"react\";\r\nimport { Container } from \"semantic-ui-react\";\r\nimport { Grid, Segment } from \"semantic-ui-react\";\r\nimport Chart from \"../components/Chart\";\r\nimport StateStats from \"../components/StateStats\";\r\n\r\nconst Index = () => {\r\n  const [url, setUrl] = useState(\"https://covid19.mathdro.id/api\");\r\n\r\n  const [selectedCountry, setSelected] = useState(\"world\");\r\n\r\n  const memoStatsComponent = useMemo(() => <Stats url={url} />, [url]);\r\n\r\n  const memoStateStats = useMemo(\r\n    () => <StateStats country={selectedCountry} />,\r\n    [selectedCountry]\r\n  );\r\n\r\n  const onChange = country => {\r\n    setSelected(country);\r\n\r\n    if (country === \"world\") {\r\n      setUrl(\"https://covid19.mathdro.id/api\");\r\n    } else {\r\n      setUrl(`https://covid19.mathdro.id/api/countries/${country}`);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Grid>\r\n        <Grid.Row stretched>\r\n          <Grid.Column>\r\n            <Segment>\r\n              <Chart />\r\n            </Segment>\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n        <Grid.Row stretched>\r\n          <Grid.Column>\r\n            <Segment>\r\n              <CountrySelector onChange={onChange} />\r\n              <br />\r\n              {memoStatsComponent}\r\n            </Segment>\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n        <Grid.Row stretched>\r\n          <Grid.Column>\r\n            <Segment>{memoStateStats}</Segment>\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n      </Grid>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Index;\r\n","const getChartDate = (chartType, apiData) => {\r\n  //console.log(\"Api data\", apiData.slice(-10));\r\n  let sliced = apiData.slice(-40);\r\n\r\n  return {\r\n    labels: sliced.map(it => it.reportDateString),\r\n    datasets: [\r\n      {\r\n        label: \"Total\",\r\n        fill: false,\r\n        lineTension: 0.1,\r\n        pointBackgroundColor: \"red\",\r\n        pointBorderColor: \"red\",\r\n        pointHoverRadius: 5,\r\n        pointRadius: 3,\r\n        backgroundColor: \"red\",\r\n        pointHoverBackgroundColor: \"red\",\r\n        pointHoverBorderColor: \"rgba(220,220,220,1)\",\r\n        pointBorderWidth: 1,\r\n        pointHoverRadius: 5,\r\n        borderColor: \"red\",\r\n        data: sliced.map(it => it.totalConfirmed)\r\n      },\r\n      {\r\n        label: \"China\",\r\n        fill: false,\r\n        lineTension: 0.1,\r\n        backgroundColor: \"orange\",\r\n        borderColor: \"orange\",\r\n        borderCapStyle: \"butt\",\r\n        borderDash: [],\r\n        borderDashOffset: 0.0,\r\n        borderJoinStyle: \"miter\",\r\n        pointBorderColor: \"orange\",\r\n        pointBackgroundColor: \"orange\",\r\n        pointBorderWidth: 1,\r\n        pointHoverRadius: 5,\r\n        pointHoverBackgroundColor: \"orange\",\r\n        pointHoverBorderColor: \"rgba(220,220,220,1)\",\r\n        pointHoverBorderWidth: 2,\r\n        pointRadius: 3,\r\n        pointHitRadius: 10,\r\n        data: sliced.map(it => it.mainlandChina)\r\n      },\r\n      {\r\n        label: \"Other Countries\",\r\n        fill: false,\r\n        lineTension: 0.1,\r\n        backgroundColor: \"blue\",\r\n        borderColor: \"blue\",\r\n        borderCapStyle: \"butt\",\r\n        borderDash: [],\r\n        borderDashOffset: 0.0,\r\n        borderJoinStyle: \"miter\",\r\n        pointBorderColor: \"blue\",\r\n        pointBackgroundColor: \"blue\",\r\n        pointBorderWidth: 1,\r\n        pointHoverRadius: 5,\r\n        pointHoverBackgroundColor: \"blue\",\r\n        pointHoverBorderColor: \"rgba(220,220,220,1)\",\r\n        pointHoverBorderWidth: 2,\r\n        pointRadius: 3,\r\n        pointHitRadius: 10,\r\n        data: sliced.map(it => it.otherLocations)\r\n      },\r\n      {\r\n        label: \"Recovered\",\r\n        fill: false,\r\n        lineTension: 0.1,\r\n        backgroundColor: \"green\",\r\n        borderColor: \"green\",\r\n        borderCapStyle: \"butt\",\r\n        borderDash: [],\r\n        borderDashOffset: 0.0,\r\n        borderJoinStyle: \"miter\",\r\n        pointBorderColor: \"green\",\r\n        pointBackgroundColor: \"green\",\r\n        pointBorderWidth: 1,\r\n        pointHoverRadius: 5,\r\n        pointHoverBackgroundColor: \"green\",\r\n        pointHoverBorderColor: \"rgba(220,220,220,1)\",\r\n        pointHoverBorderWidth: 2,\r\n        pointRadius: 3,\r\n        pointHitRadius: 10,\r\n        data: sliced.map(it => it.totalRecovered)\r\n      }\r\n    ]\r\n  };\r\n};\r\n\r\nconst getChartOptions = type => {\r\n  return {\r\n    responsive: true,\r\n    height: 400,\r\n    legend: {\r\n      position: \"top\",\r\n      labels: {\r\n        usePointStyle: true,\r\n        boxWidth: 8\r\n      }\r\n    },\r\n    tooltips: {\r\n      mode: \"index\",\r\n      callbacks: {\r\n        label: function(tooltipItem, data) {\r\n          var label = data.datasets[tooltipItem.datasetIndex].label || \"\";\r\n          if (label) {\r\n            label += \": \";\r\n          }\r\n          label += tooltipItem.yLabel.toLocaleString();\r\n          return label;\r\n        }\r\n      }\r\n    },\r\n    scales: {\r\n      xAxes,\r\n      yAxes\r\n    },\r\n    title: {\r\n      display: \"Display\",\r\n      text: \"Coronavirs Cases - Overall Stats\"\r\n    }\r\n  };\r\n};\r\n\r\nconst xAxes = [\r\n  {\r\n    type: \"time\",\r\n    distribution: \"series\",\r\n    gridLines: {\r\n      display: false\r\n    },\r\n    scaleLabel: {\r\n      display: true,\r\n      labelString: \"Date (Last 40 days)\"\r\n    },\r\n    ticks: {\r\n      major: {\r\n        enabled: true,\r\n        fontStyle: \"bold\"\r\n      },\r\n      source: \"data\",\r\n      autoSkip: true,\r\n      autoSkipPadding: 0,\r\n      maxRotation: 50\r\n    },\r\n    time: {\r\n      tooltipFormat: \"MM/DD/YYYY\",\r\n      displayFormats: {\r\n        month: \"MMM DD\"\r\n      }\r\n    }\r\n  }\r\n];\r\n\r\nconst yAxes = [\r\n  {\r\n    scaleLabel: {\r\n      display: true,\r\n      labelString: \"Number of cases (in thousands)\"\r\n    },\r\n    ticks: {\r\n      beginAtZero: true,\r\n      userCallback: function(value, index, values) {\r\n        return value.toLocaleString(); // this is all we need\r\n      }\r\n    }\r\n  }\r\n];\r\nexport { getChartDate, getChartOptions };\r\n","export function numberWithCommas(x) {\r\n  return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n}\r\n","import { useState, useEffect, useRef } from \"react\";\r\n\r\nexport default url => {\r\n  const isCurrent = useRef(true);\r\n  const [stats, setStats] = useState();\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      // called when the component is going to unmount\r\n      isCurrent.current = false;\r\n    };\r\n  }, []);\r\n\r\n  const getStats = async () => {\r\n    console.log(\"UseFetch invoked:\", url);\r\n    let data;\r\n    try {\r\n      let response = await fetch(url);\r\n      data = await response.json();\r\n      if (isCurrent.current) setStats(data);\r\n    } catch (err) {\r\n      setError(err);\r\n      setStats(null);\r\n    }\r\n    if (isCurrent.current) setLoading(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (url) getStats();\r\n  }, [url, setStats]);\r\n\r\n  return { stats, loading, error };\r\n};\r\n\r\n// export default function Example() {\r\n//   const [data, dataSet] = useState(false);\r\n\r\n//   async function fetchMyAPI() {\r\n//     let response = await fetch(\"api/data\");\r\n//     response = await res.json();\r\n//     dataSet(response);\r\n//   }\r\n\r\n//   useEffect(() => {\r\n//     fetchMyAPI();\r\n//   }, []);\r\n\r\n//   return <div>{data}</div>;\r\n// }\r\n","module.exports = require(\"react\");","module.exports = require(\"react-chartjs-2\");","module.exports = require(\"semantic-ui-react\");"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACxFA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AC5BA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AAIA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACzCA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAGA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AAGA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AAGA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AAGA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACtGA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAJA;AAQA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;;;;;;;;;;;;AC3DA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnBA;AAsBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnBA;AAsBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnBA;AA7DA;AAoFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAOA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AARA;AAFA;AAaA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AA3BA;AAgCA;AACA;AACA;AAEA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AARA;AAUA;AACA;AACA;AACA;AADA;AAFA;AApBA;AA6BA;AAEA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAJA;AALA;;;;;;;;;;;;;AC5JA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;ACFA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;AClDA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;A","sourceRoot":""}