{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.215c153481dcb2fec001.hot-update.js","sources":["webpack:///./components/CountrySelector.js"],"sourcesContent":["import useFetch from \"../utils/useFetch\";\r\nimport { Dropdown, Grid, Segment, Label } from \"semantic-ui-react\";\r\n\r\nconst CountrySelector = ({ onChange }) => {\r\n  const { stats: countries, error, loading } = useFetch(\r\n    \"https://covid19.mathdro.id/api/countries\"\r\n  );\r\n\r\n  if (loading) return <p>Countries Loading...</p>;\r\n\r\n  if (error) return <p>Error loading countries..</p>;\r\n\r\n  // change value with countries.iso3[code] if iso3 code required to be passed to API\r\n  //console.log(\"country selector\", countries);\r\n  let countryOptions = countries.countries.map(country => {\r\n    return {\r\n      key: country.name,\r\n      value: country.iso2,\r\n      text: country.name\r\n    };\r\n  });\r\n\r\n  countryOptions = [\r\n    { key: \"world\", value: \"world\", text: \"World\" },\r\n    ...countryOptions\r\n  ];\r\n\r\n  return (\r\n    <>\r\n      {/* <Grid columns='equal' stackable='true'>\r\n        <Grid.Column>\r\n          <Label as='label' basic color='blue' size='big'>\r\n            Select Country\r\n          </Label>\r\n        </Grid.Column>\r\n        <Grid.Column width={13}> */}\r\n      <Dropdown\r\n        placeholder='Select Country'\r\n        fluid\r\n        search\r\n        selection\r\n        options={countryOptions}\r\n        defaultValue='world'\r\n        onChange={(e, data) => {\r\n          // console.log(\"countries=>\", data.value, countries.iso3[data.value]);\r\n          onChange(\r\n            data.value,\r\n            countries.countries.find(x => x.iso2 === data.value).iso3\r\n          );\r\n        }}\r\n      />\r\n      {/* </Grid.Column>\r\n      </Grid> */}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CountrySelector;\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAEA;AACA;AAAA;AAAA;AAAA;AAIA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAEA;AAbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmBA;AACA;AACA;;;;A","sourceRoot":""}