{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.9e7a77c5f9794ae271aa.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["import CountrySelector from \"../components/CountrySelector\";\r\nimport Stats from \"../components/Stats\";\r\nimport { useState, useMemo } from \"react\";\r\nimport { Container } from \"semantic-ui-react\";\r\nimport { Grid, Segment, Responsive, Button } from \"semantic-ui-react\";\r\nimport Chart from \"../components/Chart\";\r\nimport StateStats from \"../components/StateStats\";\r\nimport BarChart from \"../components/BarChart\";\r\n\r\nconst Index = () => {\r\n  const [url, setUrl] = useState(\"https://covid19.mathdro.id/api\");\r\n\r\n  const [selectedCountry, setSelected] = useState({ iso2: \"\", iso3: \"\" });\r\n\r\n  const [quickLinkState, setQuickLink] = useState(undefined);\r\n\r\n  const memoStatsComponent = useMemo(() => <Stats url={url} />, [url]);\r\n\r\n  const memoStateStats = useMemo(\r\n    () => (\r\n      <StateStats iso3={selectedCountry.iso3} iso2={selectedCountry.iso3} />\r\n    ),\r\n    [selectedCountry]\r\n  );\r\n\r\n  const onChange = (iso2, iso3) => {\r\n    //this is to load state dropdown for StateStats\r\n    setSelected({ iso2, iso3 });\r\n\r\n    if (iso2 === \"world\") {\r\n      setUrl(\"https://covid19.mathdro.id/api\");\r\n    } else {\r\n      //this is to load statistics of selected country. country is iso2 code\r\n      setUrl(`https://covid19.mathdro.id/api/countries/${iso2}`);\r\n    }\r\n  };\r\n\r\n  const memoBarChartComp = useMemo(\r\n    () => <BarChart selectedState={quickLinkState} />,\r\n    [quickLinkState]\r\n  );\r\n\r\n  const handleBtnClick = (provinceState, iso2, countryName) => {\r\n    setQuickLink({ iso2, provinceState, countryName });\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Grid stackable={true} stretched={true}>\r\n        <Grid.Row stretched>\r\n          <Grid.Column>\r\n            <Responsive as={Segment}>\r\n              <Chart />\r\n            </Responsive>\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n        <Grid.Row stretched>\r\n          <Grid.Column>\r\n            <Responsive as={Segment}>\r\n              <CountrySelector onChange={onChange} />\r\n              <br />\r\n              {memoStatsComponent}\r\n            </Responsive>\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n        <Grid.Row stretched>\r\n          <Grid.Column>\r\n            <Responsive as={Segment}>{memoStateStats}</Responsive>\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n        <Grid.Row stretched>\r\n          <Grid.Column>\r\n            <Responsive as={Segment}>\r\n              <Button\r\n                size='mini'\r\n                onClick={(e, data) => {\r\n                  handleBtnClick(data.children, \"US\", \"USA\");\r\n                }}\r\n                color='blue'\r\n              >\r\n                New Jersey\r\n              </Button>\r\n              <Button\r\n                size='mini'\r\n                onClick={(e, data) => {\r\n                  handleBtnClick(data.children, \"US\", \"USA\");\r\n                }}\r\n                color='blue'\r\n              >\r\n                New York\r\n              </Button>\r\n              <Button\r\n                size='mini'\r\n                onClick={(e, data) => {\r\n                  handleBtnClick(data.children, \"US\", \"USA\");\r\n                }}\r\n                color='blue'\r\n              >\r\n                California\r\n              </Button>\r\n              <Button\r\n                size='mini'\r\n                onClick={(e, data) => {\r\n                  handleBtnClick(data.children, \"US\", \"USA\");\r\n                }}\r\n                color='blue'\r\n              >\r\n                Washington\r\n              </Button>\r\n              <Button\r\n                size='mini'\r\n                onClick={(e, data) => {\r\n                  handleBtnClick(data.children, \"US\", \"USA\");\r\n                }}\r\n                color='blue'\r\n              >\r\n                Massachusetts\r\n              </Button>\r\n              <Button\r\n                size='mini'\r\n                onClick={(e, data) => {\r\n                  handleBtnClick(undefined, \"IN\", \"India\");\r\n                }}\r\n                color='blue'\r\n              >\r\n                India\r\n              </Button>\r\n              <Button\r\n                size='mini'\r\n                onClick={(e, data) => {\r\n                  handleBtnClick(undefined, \"IT\", \"Italy\");\r\n                }}\r\n                color='blue'\r\n              >\r\n                Italy\r\n              </Button>\r\n              <Button\r\n                size='mini'\r\n                onClick={(e, data) => {\r\n                  handleBtnClick(undefined, \"IR\", \"Iran\");\r\n                }}\r\n                color='blue'\r\n              >\r\n                Iran\r\n              </Button>\r\n              <Button\r\n                size='mini'\r\n                onClick={(e, data) => {\r\n                  handleBtnClick(undefined, \"KR\", \"Korea, South\");\r\n                }}\r\n                color='blue'\r\n              >\r\n                South Korea\r\n              </Button>\r\n              <Button\r\n                size='mini'\r\n                onClick={(e, data) => {\r\n                  handleBtnClick(\"France\", \"FR\", \"France\");\r\n                }}\r\n                color='blue'\r\n              >\r\n                France\r\n              </Button>\r\n\r\n              {quickLinkState && memoBarChartComp}\r\n            </Responsive>\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n      </Grid>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Index;\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AAHA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AACA;AAKA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBA;AACA;AACA;;;;A","sourceRoot":""}